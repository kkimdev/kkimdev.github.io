"use strict";(globalThis.webpackChunkkkimdev=globalThis.webpackChunkkkimdev||[]).push([[220],{1756:e=>{e.exports=JSON.parse('{"permalink":"/blog/2019/04/22/Rust-Compile-Time-Memory-Safety","source":"@site/blog/2019-04-22-Rust-Compile-Time-Memory-Safety.md","title":"Rust - Compile-Time Memory Safety","description":"In this post, I will explain what makes Rust interesting by drawing an analogy between dynamic vs. static typing and the approaches to memory safety in C++ and Rust, without going into too much detail.","date":"2019-04-22T00:00:00.000Z","tags":[],"readingTime":6.86,"hasTruncateMarker":true,"authors":[{"name":"Kibeom Kim","url":"/","imageURL":"https://github.com/kkimdev.png","key":"kkimdev","page":null}],"frontMatter":{"draft":false,"title":"Rust - Compile-Time Memory Safety","authors":"kkimdev"},"unlisted":false,"nextItem":{"title":"IEEE 754 Floating Point Type in C++","permalink":"/blog/2018/06/15/IEEE-754-Floating-Point-Type-in-C++"}}')},9087:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(6363);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}},9998:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var r=t(1756),i=t(7259),s=t(9087);const a={draft:!1,title:"Rust - Compile-Time Memory Safety",authors:"kkimdev"},o="Preventing Type Errors at Compile Time",l={authorsImageUrls:[void 0]},c=[{value:"Using an Uninitialized Variable",id:"using-an-uninitialized-variable",level:4},{value:"Invalid Memory Access",id:"invalid-memory-access",level:4},{value:"Dangling Pointer/Variable",id:"dangling-pointervariable",level:4},{value:"Incorrectly Using a Moved Object",id:"incorrectly-using-a-moved-object",level:4},{value:"Data Race in Multithreading",id:"data-race-in-multithreading",level:4}];function d(e){const n={a:"a",code:"code",h1:"h1",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"In this post, I will explain what makes Rust interesting by drawing an analogy between dynamic vs. static typing and the approaches to memory safety in C++ and Rust, without going into too much detail."}),"\n",(0,i.jsx)(n.p,{children:"Static typing prevents type errors at compile time. For example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def square(x):\n    return x * x\n\nsquare(\"5\")\n# Runtime error: Can't multiply sequence by non-int of type 'str'\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"C++"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'int square(int x) {\n    return x * x;\n}\n\nsquare("5");\n// Compile error: Invalid conversion from \u2018const char*\u2019 to \u2018int\u2019\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Static typing has the following benefits (taken from\n",(0,i.jsx)(n.a,{href:"https://www.youtube.com/watch?v=GiZKuyLKvAA&t=702",children:"Guido van Rossum's Stanford seminar"}),"):"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Catches (certain) bugs earlier"}),"\n",(0,i.jsx)(n.li,{children:"Refactor with confidence"}),"\n",(0,i.jsx)(n.li,{children:"Helps human readers navigate large codebases"}),"\n",(0,i.jsx)(n.li,{children:"Better than (certain) comments: the compiler keeps you honest"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In fact, all popular dynamic languages have static typing projects, often backed\nby big corporations, as the benefits of static typing become more significant for\nlarger projects."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Python: ",(0,i.jsx)(n.a,{href:"https://www.python.org/dev/peps/pep-0484/",children:"PEP 484 Type Hints"}),",\n",(0,i.jsx)(n.a,{href:"http://mypy-lang.org/index.html",children:"Dropbox Mypy"})]}),"\n",(0,i.jsxs)(n.li,{children:["JavaScript: ",(0,i.jsx)(n.a,{href:"https://www.typescriptlang.org/",children:"Microsoft TypeScript"}),",\n",(0,i.jsx)(n.a,{href:"https://developers.google.com/closure/compiler/",children:"Google Closure"}),",\n",(0,i.jsx)(n.a,{href:"https://flow.org/",children:"Facebook Flow"})]}),"\n",(0,i.jsxs)(n.li,{children:["Ruby: ",(0,i.jsx)(n.a,{href:"https://sorbet.org/",children:"Stripe Sorbet"})]}),"\n",(0,i.jsxs)(n.li,{children:["PHP: ",(0,i.jsx)(n.a,{href:"https://hacklang.org/",children:"Facebook Hack"})]}),"\n",(0,i.jsxs)(n.li,{children:["Lua: ",(0,i.jsx)(n.a,{href:"https://github.com/dibyendumajumdar/ravi",children:"Ravi"})]}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"preventing-memory-errors-at-compile-time",children:"Preventing Memory Errors at Compile Time"}),"\n",(0,i.jsx)(n.p,{children:"Since memory safety is a major practical issue in C++, it would be great if we\ncould check for memory errors statically, in the same way that static typing checks for type errors."}),"\n",(0,i.jsx)(n.p,{children:"Indeed, this was one of the main motivations behind Rust's creation. Just as a C++ compiler tracks type information for each variable, the Rust compiler also tracks ownership, lifetime, and aliasing for each variable."}),"\n",(0,i.jsx)(n.p,{children:"Here is a small list of memory issues that can be statically verified with Rust."}),"\n",(0,i.jsx)(n.h4,{id:"using-an-uninitialized-variable",children:"Using an Uninitialized Variable"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"C++"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"int x;\nint y = square(x);\n// Passing a garbage value at runtime.\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Rust"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"let x: i32;\nlet y = square(x);\n// Compile error\n// error[E0381]: use of possibly uninitialized variable: `x`\n//   |\n//   | let y = square(x);\n//   |                ^ use of possibly uninitialized `x`\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"invalid-memory-access",children:"Invalid Memory Access"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"C++"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"int* x = (int*)1234;\n*x = 5;\n// Invalid memory access at runtime.\n// Segmentation fault (core dumped)\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Rust"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"let x = 1234 as *mut i32;\n*x = 5;\n// Compile error\n// error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n//   |\n//   | *x = 5;\n//   | ^^^^^^ dereference of raw pointer\n//   |\n//   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"dangling-pointervariable",children:"Dangling Pointer/Variable"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"C++"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"#include <string>\n#include <string_view>\n\nstd::string_view get_extension(std::string filename) {\n    return filename.substr(filename.find_last_of('.') + 1);\n    // Returning a dangling std::string_view at runtime.\n}\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Rust"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"fn get_extension(filename: String) -> &'static str {\n    return &filename[filename.rfind('.').unwrap() + 1..];\n    // Compile error\n    // error[E0515]: cannot return value referencing function parameter `filename`\n    //   |\n    //   | return &filename[filename.rfind('.').unwrap()+1..];\n    //   |        ^--------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    //   |        ||\n    //   |        |`filename` is borrowed here\n    //   |        returns a value referencing data owned by the current function\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"incorrectly-using-a-moved-object",children:"Incorrectly Using a Moved Object"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"C++"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"#include <vector>\n\nvoid process(std::vector<int> v);\n\n// ...\nstd::vector<int> x = {1, 2, 3};\nprocess(std::move(x));\nx.push_back(4);\n// Using an object in an unspecified state at runtime.\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Rust"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"fn process(v: Vec<i32>);\n\n// ...\nlet mut x = vec![1, 2, 3];\nprocess(x);\nx.push(4);\n// Compile error\n// error[E0382]: borrow of moved value: `x`\n//   |\n//   | let mut x = vec![1, 2, 3];\n//   |     ----- move occurs because `x` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n//   | process(x);\n//   |         - value moved here\n//   | x.push(4);\n//   | ^ value borrowed here after move\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"data-race-in-multithreading",children:"Data Race in Multithreading"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"C++"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"#include <iostream>\n#include <thread>\n#include <vector>\n\nstatic int MONEY = 0;\n\nvoid deposit_money(int amount) {\n    for (int i = 0; i < amount; ++i)\n        ++MONEY;\n        // A data race occurs at runtime. Some increments can be lost.\n}\n\nint main() {\n    std::vector<std::thread> threads;\n\n    for(int i = 0; i < 100; ++i)\n        threads.emplace_back(deposit_money, 10000);\n\n    for(int i = 0; i < 100; ++i)\n        threads[i].join();\n\n    // The result might not be 1,000,000 due to the data race.\n    std::cout << MONEY;\n}\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Rust"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'static mut MONEY: i32 = 0;\n\nfn deposit_money(amount: i32) {\n    for _ in 0..amount {\n        MONEY += 1;\n        // Compile error\n        // error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n        //   |\n        //   |     MONEY += 1;\n        //   |     ^^^^^^^^^^ use of mutable static\n        //   |\n        //   = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n    }\n}\n\nfn main() {\n    let mut threads = vec![];\n\n    for _ in 0..100 {\n        let thread = std::thread::spawn(|| deposit_money(10000));\n        threads.push(thread);\n    }\n\n    for thread in threads {\n        let _ = thread.join();\n    }\n\n    unsafe {\n        println!("{}", MONEY);\n    }\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["To make these static memory checks possible, Rust enforces that you can have either a single mutable reference or multiple read-only references at a time, but not both. In fact, these are very good idioms for structuring large codebases anyway, and they normally do not get in the way of writing ordinary applications. For libraries that require fine-grained memory control, like data containers (e.g., vectors, lists, and hash maps), the\n",(0,i.jsxs)(n.a,{href:"https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html",children:[(0,i.jsx)(n.code,{children:"unsafe"})," keyword"]})," is\navailable to bypass these restrictions."]}),"\n",(0,i.jsx)(n.p,{children:"To be fair, there are compiler options and external tools that can detect C++ memory issues, but they are nowhere near as complete as Rust's built-in checks due to implementation complexity and inherent limitations in the C++ language specification."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"-Wall -Wextra"})," compiler options: Even for the trivial examples above, GCC 8.3\nand Clang 8.0 could only detect one of the five cases: the use of an uninitialized variable."]}),"\n",(0,i.jsx)(n.li,{children:"External tools (e.g., Valgrind, Address/Memory/Thread Sanitizers): These are\ngreat tools. However, in practice, there is a big difference between compile-time and run-time detection. Run-time checks are limited to the specific code paths your tests execute. If that were sufficient, one could argue there would be no need for static typing, as tests could also be used to catch type errors."}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"how-rust-is-received",children:"How Rust Is Received"}),"\n",(0,i.jsxs)(n.p,{children:["Rust has been consistently ranked #1 in\n",(0,i.jsx)(n.a,{href:"https://insights.stackoverflow.com/survey/2019#technology-_-most-loved-dreaded-and-wanted-languages",children:'the Stack Overflow Developer Survey\'s "most loved" programming languages category'}),"\nfor four years in a row, followed by Python #2, TypeScript #3, and Kotlin #4\nin 2019."]}),"\n",(0,i.jsx)(n.p,{children:"It has also received favorable comments from some of the most highly regarded C/C++\nprogrammers:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/John_Carmack",children:"John Carmack"}),":\n",(0,i.jsx)(n.a,{href:"https://twitter.com/id_aa_carmack/status/1094419108781789184?lang=en",children:'"...writing Rust code feels very wholesome."'})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Linus_Torvalds",children:"Linus Torvalds"}),":\n",(0,i.jsx)(n.a,{href:"https://www.infoworld.com/article/3109150/linux-at-25-linus-torvalds-on-the-evolution-and-future-of-linux.html",children:'"...We\'ve had the system people who used Modula-2 or Ada, and I have to say Rust looks a lot better than either of those two disasters."'})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Miguel_de_Icaza",children:"Miguel de Icaza"}),":\n",(0,i.jsx)(n.a,{href:"https://www.reddit.com/r/programmerchat/comments/4dxpcp/i_am_miguel_de_icaza_i_started_xamarin_mono_gnome/d1ve1k5?utm_source=share&utm_medium=web2x",children:'"...I have been following an OS written entirely in Rust, and it has great idioms."'})]}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"rust-in-production",children:"Rust in Production"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://chromium.googlesource.com/chromiumos/platform/crosvm/",children:"Google's Crosvm (ChromeOS Virtual Machine Manager)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.theregister.co.uk/2016/10/18/facebook_mercurial_devs_forget_git/",children:"Facebook's Mercurial server"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://aws.amazon.com/blogs/opensource/firecracker-open-source-secure-and-fast-microvm-for-serverless-computing/",children:"Amazon's AWS Firecracker"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/Azure/iotedge/tree/master/edgelet",children:"Microsoft's Azure IoT Edge"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/stratis-storage",children:"Red Hat's Stratis storage"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://dropbox.tech/infrastructure/rewriting-the-heart-of-our-sync-engine",children:"Dropbox's storage optimization engine"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://servo.org/",children:"Mozilla's Servo browser engine"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://blog.cloudflare.com/enjoy-a-slice-of-quic-and-rust/",children:"Cloudflare's QUIC protocol implementation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.infoq.com/presentations/rust-npm-registry/",children:"NPM's authorization service"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://twitter.com/bltroutwine/status/1002234680949719040",children:"Unity's data engineering team"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://twitter.com/stuhood/status/978410393944047617?s=19",children:"Twitter's build team"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.reddit.com/r/rust/comments/7utj4t/reddit_is_hiring_a_senior_rust_engineer/",children:"Reddit's comment processing"})}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"This is just one example of why Rust is compelling, and there are many other\nthings that Rust gets right. Hopefully, this post was interesting enough to encourage you to\nread more about Rust!"}),"\n",(0,i.jsx)(n.h1,{id:"references",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.jonathanturner.org/2017/10/fun-facts-about-rust-growth.html",children:"https://www.jonathanturner.org/2017/10/fun-facts-about-rust-growth.html"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.jonathanturner.org/2018/07/snapshot-of-rust-popularity.html",children:"https://www.jonathanturner.org/2018/07/snapshot-of-rust-popularity.html"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://users.rust-lang.org/t/rust-quotes-and-press/5405",children:"https://users.rust-lang.org/t/rust-quotes-and-press/5405"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.rust-lang.org/production/users",children:"https://www.rust-lang.org/production/users"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);