"use strict";(self.webpackChunkkkimdev=self.webpackChunkkkimdev||[]).push([[701],{3565:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var t=i(1527),r=i(6274);const s={draft:!1,title:"Rust - Compile Time Memory Safety",authors:"kkimdev"},a="Preventing type errors at compile time",o={permalink:"/blog/2019/04/22/Rust-Compile-Time-Memory-Safety",source:"@site/blog/2019-04-22-Rust-Compile-Time-Memory-Safety.md",title:"Rust - Compile Time Memory Safety",description:"In this post, I will explain why Rust is interesting by making an analogy",date:"2019-04-22T00:00:00.000Z",formattedDate:"April 22, 2019",tags:[],readingTime:6.025,hasTruncateMarker:!0,authors:[{name:"Kibeom Kim",url:"/",imageURL:"https://github.com/kkimdev.png",key:"kkimdev"}],frontMatter:{draft:!1,title:"Rust - Compile Time Memory Safety",authors:"kkimdev"},unlisted:!1,nextItem:{title:"IEEE 754 Floating Point Type in C++",permalink:"/blog/2018/06/15/IEEE-754-Floating-Point-Type-in-C++"}},l={authorsImageUrls:[void 0]},c=[{value:"Using uninitialized variable",id:"using-uninitialized-variable",level:4},{value:"Invalid memory access",id:"invalid-memory-access",level:4},{value:"Dangling pointer / variable",id:"dangling-pointer--variable",level:4},{value:"Incorrectly using a moved object",id:"incorrectly-using-a-moved-object",level:4},{value:"Data race in multithreading",id:"data-race-in-multithreading",level:4}];function d(e){const n={a:"a",code:"code",h1:"h1",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:'In this post, I will explain why Rust is interesting by making an analogy\nbetween "dynamic vs static typing" and "C++ vs Rust\'s static memory safety"\nwithout going into too much detail.'}),"\n",(0,t.jsx)(n.p,{children:"Static typing prevents type errors at compile time, for example,"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Python"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def square(x):\n    return x * x\n\nsquare(\"5\")\n# Runtime error: Can't multiply sequence by non-int of type 'str'\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"C++"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'int square(int x) {\n    return x * x;\n}\n\nsquare("5");\n// Compile error: Invalid conversion from \u2018const char*\u2019 to \u2018int\u2019\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Static typing has the following benefits (taken from\n",(0,t.jsx)(n.a,{href:"https://www.youtube.com/watch?v=GiZKuyLKvAA&t=702",children:"Guido Rossum's Stanford seminar"}),")."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Catches (certain) bugs earlier"}),"\n",(0,t.jsx)(n.li,{children:"Refactor with confidence"}),"\n",(0,t.jsx)(n.li,{children:"Helps human reader navigate large code bases"}),"\n",(0,t.jsx)(n.li,{children:"Better than (certain) comments: compiler keeps you honest"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"In fact, all popular dynamic languages have static typing projects, often backed\nby big corporations as the benefit of static typing becomes more significant for\nlarger projects."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Python: ",(0,t.jsx)(n.a,{href:"https://www.python.org/dev/peps/pep-0484/",children:"PEP 484 Type Hints"}),",\n",(0,t.jsx)(n.a,{href:"http://mypy-lang.org/index.html",children:"Dropbox Mypy"})]}),"\n",(0,t.jsxs)(n.li,{children:["Javascript: ",(0,t.jsx)(n.a,{href:"https://www.typescriptlang.org/",children:"Microsoft Typescript"}),",\n",(0,t.jsx)(n.a,{href:"https://developers.google.com/closure/compiler/",children:"Google Closure"}),",\n",(0,t.jsx)(n.a,{href:"https://flow.org/",children:"Facebook Flow"})]}),"\n",(0,t.jsxs)(n.li,{children:["Ruby: ",(0,t.jsx)(n.a,{href:"https://sorbet.org/",children:"Stripe Sorbet"})]}),"\n",(0,t.jsxs)(n.li,{children:["PHP: ",(0,t.jsx)(n.a,{href:"https://hacklang.org/",children:"Facebook Hack"})]}),"\n",(0,t.jsxs)(n.li,{children:["Lua: ",(0,t.jsx)(n.a,{href:"https://github.com/dibyendumajumdar/ravi",children:"Ravi"})]}),"\n"]}),"\n",(0,t.jsx)(n.h1,{id:"preventing-memory-errors-at-compile-time",children:"Preventing memory errors at compile time"}),"\n",(0,t.jsx)(n.p,{children:"Since memory safety in C++ is a major practical issue, it would be great if we\ncan check them statically in a similar manner that static typing does."}),"\n",(0,t.jsx)(n.p,{children:"Yes, this was one of the main motivations behind the creation of Rust. Just like\nC++ compiler tracks type information for each variable, Rust compiler tracks\nownership, lifetime, and aliasing for each variable in addition."}),"\n",(0,t.jsx)(n.p,{children:"Here is a small list of memory issues that can be statically verified with Rust."}),"\n",(0,t.jsx)(n.h4,{id:"using-uninitialized-variable",children:"Using uninitialized variable"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"C++"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"int x;\nint y = square(x);\n// Passing a garbage value at runtime.\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Rust"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"let mut x: i32;\nlet mut y = square(x);\n// Compile error\n// error[E0381]: use of possibly uninitialized variable: `x`\n//   |\n//   | let mut y = square(x);\n//   |                    ^ use of possibly uninitialized `x`\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"invalid-memory-access",children:"Invalid memory access"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"C++"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"int* x = (int*)1234;\n*x = 5;\n// Runtime invalid memory access\n// Segmentation fault (core dumped)\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Rust"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"let x = 1234 as *mut i32;\n*x = 5;\n// Compile error\n// error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n//   |\n//   | *x = 5;\n//   | ^^^^^^ dereference of raw pointer\n//   |\n//   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"dangling-pointer--variable",children:"Dangling pointer / variable"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"C++"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"std::string_view get_extension(std::string filename) {\n    return filename.substr(filename.find_last_of('.') + 1);\n    // Returning dangling std::string_view at runtime.\n}\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Rust"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"fn get_extension(filename: String) -> &'static str {\n    return &filename[filename.rfind('.').unwrap()+1..];\n    // Compile error\n    // error[E0515]: cannot return value referencing function parameter `filename`\n    //   |\n    //   | return &filename[filename.rfind('.').unwrap()+1..];\n    //   |        ^--------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    //   |        ||\n    //   |        |`filename` is borrowed here\n    //   |        returns a value referencing data owned by the current function\n    //   }\n    //\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"incorrectly-using-a-moved-object",children:"Incorrectly using a moved object"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"C++"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"std::vector<int> x = {1, 2, 3};\nprocess(std::move(x));\nx.push_back(4);\n// Using an unspecified state object at runtime\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Rust"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"let mut x = vec![1, 2, 3];\nprocess(x);\nx.push(4);\n// Compile error\n// error[E0382]: borrow of moved value: `x`\n//   |\n//   | let mut x = vec![1, 2, 3];\n//   |     ----- move occurs because `x` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n//   | process(x);\n//   |         - value moved here\n//   | x.push(4);\n//   | ^ value borrowed here after move\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"data-race-in-multithreading",children:"Data race in multithreading"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"C++"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"#include<iostream>\n#include<thread>\n#include<vector>\n\nstatic int MONEY = 0;\n\nvoid deposit_money(int amount) {\n    for (int i = 0; i < amount; ++i)\n        ++MONEY;\n        // Runtime data race.  Some increments can be ignored.\n}\n\nint main() {\n    std::vector<std::thread> threads;\n\n    for(int i = 0; i < 100; ++i)\n        threads.emplace_back(deposit_money, 10000);\n\n    for(int i = 0; i < 100; ++i)\n        threads[i].join();\n\n    // The result might not be 1000000 due to the data race.\n    std::cout << MONEY;\n}\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Rust"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'static mut MONEY: i32 = 0;\n\nfn deposit_money(amount: i32) {\n    for _ in 0..amount {\n        MONEY += 1;\n        // Compile error\n        // error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n        //   |\n        //   |     MONEY += 1;\n        //   |     ^^^^^^^^^^ use of mutable static\n        //   |\n        //   = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n    }\n}\n\nfn main() {\n    let mut threads = vec![];\n\n    for _ in 0..100 {\n        let thread = std::thread::spawn(|| deposit_money(10000));\n        threads.push(thread);\n    }\n\n    for thread in threads {\n        let _ = thread.join();\n    }\n\n    println!("{}", MONEY);\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["To make these static memory checks possible, Rust enforces single mutable\nownership or multiple read-only aliases at a time. In fact, they are very good\nidioms to structure large codebase anyways, and normally they do not get in the\nway for ordinary applications. For libraries that require fine-grained memory\ncontrol like data containers, e.g., vector, list, and hash map,\n",(0,t.jsxs)(n.a,{href:"https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html",children:[(0,t.jsx)(n.code,{children:"unsafe"})," keyword"]})," is\navailable to bypass the restrictions."]}),"\n",(0,t.jsx)(n.p,{children:"To be fair, there are compiler options or external tools that we can use to\ndetect C++ memory issues, but it's nowhere close to the completeness of Rust due\nto the implementation complexity and the inherent language spec limitations."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-Wall -Wextra"})," compiler options: Even for the above trivial examples, GCC 8.3\nand Clang 8.0 could only detect the one case, uninitialized variable, out of\nthe five cases."]}),"\n",(0,t.jsx)(n.li,{children:"External tools, e.g., Valgrind, Address/Memory/Thread Sanitizers: They are\ngreat tools. However in practice, being able to detect at compile time vs\nruntime is a big difference as the detection is limited to the specific test\ncases that we have. Otherwise, there would be no need for static typing for\ncorrectness as we can run tests to catch the type errors."}),"\n"]}),"\n",(0,t.jsx)(n.h1,{id:"how-rust-is-received",children:"How Rust is received"}),"\n",(0,t.jsxs)(n.p,{children:["Rust has been consistently ranked #1 in\n",(0,t.jsx)(n.a,{href:"https://insights.stackoverflow.com/survey/2019#technology-_-most-loved-dreaded-and-wanted-languages",children:"Stack Overflow developer survey's most loved programming languages category"}),"\nfor 4 years in a row, followed by Python #2, Typescript #3, and Kotlin #4\nin 2019."]}),"\n",(0,t.jsx)(n.p,{children:"Also, it got favorable comments from some of the highly regarded C/C++\nprogrammers:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/John_Carmack",children:"John Carmack"}),":\n",(0,t.jsx)(n.a,{href:"https://twitter.com/id_aa_carmack/status/1094419108781789184?lang=en",children:'"...writing Rust code feels very wholesome."'})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Linus_Torvalds",children:"Linus Torvalds"}),":\n",(0,t.jsx)(n.a,{href:"https://www.infoworld.com/article/3109150/linux-at-25-linus-torvalds-on-the-evolution-and-future-of-linux.html",children:'"...We\'ve had the system people who used Modula-2 or Ada, and I have to say Rust looks a lot better than either of those two disasters."'})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Miguel_de_Icaza",children:"Miguel Icaza"}),":\n",(0,t.jsx)(n.a,{href:"https://www.reddit.com/r/programmerchat/comments/4dxpcp/i_am_miguel_de_icaza_i_started_xamarin_mono_gnome/d1ve1k5?utm_source=share&utm_medium=web2x",children:'"...I have been following an OS written entirely in Rust, and it has great idioms."'})]}),"\n"]}),"\n",(0,t.jsx)(n.h1,{id:"rust-in-production",children:"Rust in production"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://chromium.googlesource.com/chromiumos/platform/crosvm/",children:"Google Chrome Crosvm"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.theregister.co.uk/2016/10/18/facebook_mercurial_devs_forget_git/",children:"Facebook's new Mercurial server"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.reddit.com/r/rust/comments/a0rph0/aws_firecracker_microvm_is_all_rust/",children:"Amazon AWS Firecracker"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/Azure/iotedge/tree/master/edgelet",children:"Microsoft Azure IoT Edge"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/stratis-storage",children:"Red Hat Stratis storage"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://qconsf.com/sf2016/sf2016/presentation/going-rust-optimizing-storage-dropbox.html",children:"Dropbox storage optimization"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://servo.org/",children:"Mozilla Servo"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://blog.cloudflare.com/enjoy-a-slice-of-quic-and-rust/",children:"Cloudflare's QUIC protocol implementation"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.youtube.com/watch?v=GCsxYAxw3JQ",children:"NPM"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://twitter.com/bltroutwine/status/1002234680949719040",children:"Unity data engineering"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://twitter.com/stuhood/status/978410393944047617?s=19",children:"Twitter build team"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.reddit.com/r/rust/comments/7utj4t/reddit_is_hiring_a_senior_rust_engineer/",children:"Reddit comment parsing"})}),"\n"]}),"\n",(0,t.jsx)(n.h1,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"This is just one example why Rust is compelling, and there are so many other\nthings that Rust got it right. Hopefully it was interesting enough for you to\nread more about Rust!"}),"\n",(0,t.jsx)(n.h1,{id:"references",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.jonathanturner.org/2017/10/fun-facts-about-rust-growth.html",children:"https://www.jonathanturner.org/2017/10/fun-facts-about-rust-growth.html"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.jonathanturner.org/2018/07/snapshot-of-rust-popularity.html",children:"https://www.jonathanturner.org/2018/07/snapshot-of-rust-popularity.html"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://users.rust-lang.org/t/rust-quotes-and-press/5405",children:"https://users.rust-lang.org/t/rust-quotes-and-press/5405"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.rust-lang.org/production/users",children:"https://www.rust-lang.org/production/users"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);