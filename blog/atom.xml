<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kkimdev.github.io/blog</id>
    <title>Kibeom Kim Blog</title>
    <updated>2019-04-22T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kkimdev.github.io/blog"/>
    <subtitle>Kibeom Kim Blog</subtitle>
    <entry>
        <title type="html"><![CDATA[Rust - Compile Time Memory Safety]]></title>
        <id>https://kkimdev.github.io/blog/2019/04/22/Rust-Compile-Time-Memory-Safety</id>
        <link href="https://kkimdev.github.io/blog/2019/04/22/Rust-Compile-Time-Memory-Safety"/>
        <updated>2019-04-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this post, I will explain why Rust is interesting by making an analogy]]></summary>
        <content type="html"><![CDATA[<p>In this post, I will explain why Rust is interesting by making an analogy
between "dynamic vs static typing" and "C++ vs Rust's static memory safety"
without going into too much detail.</p>
<p>Static typing prevents type errors at compile time, for example,</p>
<ul>
<li>
<p>Python</p>
<div class="language-python codeBlockContainer_RXBV theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_wPkZ"><pre tabindex="0" class="prism-code language-python codeBlock_KKOe thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_B95v"><span class="token-line" style="color:#000000"><span class="token plain">def square(x):</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    return x * x</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">square("5")</span><br></span><span class="token-line" style="color:#000000"><span class="token plain"># Runtime error: Can't multiply sequence by non-int of type 'str'</span><br></span></code></pre><div class="buttonGroup_V0Br"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_KMRO" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_D2ly"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_sKd7"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>C++</p>
<div class="language-cpp codeBlockContainer_RXBV theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_wPkZ"><pre tabindex="0" class="prism-code language-cpp codeBlock_KKOe thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_B95v"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">square</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> x</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">return</span><span class="token plain"> x </span><span class="token operator" style="color:rgb(0, 0, 0)">*</span><span class="token plain"> x</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token function" style="color:rgb(0, 0, 255)">square</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token string" style="color:rgb(163, 21, 21)">"5"</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// Compile error: Invalid conversion from ‘const char*’ to ‘int’</span><br></span></code></pre><div class="buttonGroup_V0Br"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_KMRO" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_D2ly"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_sKd7"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ul>
<p>Static typing has the following benefits (taken from
<a href="https://www.youtube.com/watch?v=GiZKuyLKvAA&amp;t=702" target="_blank" rel="noopener noreferrer">Guido Rossum's Stanford seminar</a>).</p>
<ul>
<li>Catches (certain) bugs earlier</li>
<li>Refactor with confidence</li>
<li>Helps human reader navigate large code bases</li>
<li>Better than (certain) comments: compiler keeps you honest</li>
</ul>
<p>In fact, all popular dynamic languages have static typing projects, often backed
by big corporations as the benefit of static typing becomes more significant for
larger projects.</p>
<ul>
<li>Python: <a href="https://www.python.org/dev/peps/pep-0484/" target="_blank" rel="noopener noreferrer">PEP 484 Type Hints</a>,
<a href="http://mypy-lang.org/index.html" target="_blank" rel="noopener noreferrer">Dropbox Mypy</a></li>
<li>Javascript: <a href="https://www.typescriptlang.org/" target="_blank" rel="noopener noreferrer">Microsoft Typescript</a>,
<a href="https://developers.google.com/closure/compiler/" target="_blank" rel="noopener noreferrer">Google Closure</a>,
<a href="https://flow.org/" target="_blank" rel="noopener noreferrer">Facebook Flow</a></li>
<li>Ruby: <a href="https://sorbet.org/" target="_blank" rel="noopener noreferrer">Stripe Sorbet</a></li>
<li>PHP: <a href="https://hacklang.org/" target="_blank" rel="noopener noreferrer">Facebook Hack</a></li>
<li>Lua: <a href="https://github.com/dibyendumajumdar/ravi" target="_blank" rel="noopener noreferrer">Ravi</a></li>
</ul>
<h1>Preventing memory errors at compile time</h1>
<p>Since memory safety in C++ is a major practical issue, it would be great if we
can check them statically in a similar manner that static typing does.</p>
<p>Yes, this was one of the main motivations behind the creation of Rust. Just like
C++ compiler tracks type information for each variable, Rust compiler tracks
ownership, lifetime, and aliasing for each variable in addition.</p>
<p>Here is a small list of memory issues that can be statically verified with Rust.</p>
<h4 class="anchor anchorWithStickyNavbar_awSM" id="using-uninitialized-variable">Using uninitialized variable<a href="https://kkimdev.github.io/blog/2019/04/22/Rust-Compile-Time-Memory-Safety#using-uninitialized-variable" class="hash-link" aria-label="Direct link to Using uninitialized variable" title="Direct link to Using uninitialized variable">​</a></h4>
<ul>
<li>
<p>C++</p>
<div class="language-cpp codeBlockContainer_RXBV theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_wPkZ"><pre tabindex="0" class="prism-code language-cpp codeBlock_KKOe thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_B95v"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> x</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> y </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">square</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// Passing a garbage value at runtime.</span><br></span></code></pre><div class="buttonGroup_V0Br"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_KMRO" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_D2ly"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_sKd7"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Rust</p>
<div class="language-rust codeBlockContainer_RXBV theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_wPkZ"><pre tabindex="0" class="prism-code language-rust codeBlock_KKOe thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_B95v"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">let</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">mut</span><span class="token plain"> x</span><span class="token punctuation" style="color:rgb(4, 81, 165)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">i32</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">let</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">mut</span><span class="token plain"> y </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">square</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// Compile error</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// error[E0381]: use of possibly uninitialized variable: `x`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   |</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   | let mut y = square(x);</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   |                    ^ use of possibly uninitialized `x`</span><br></span></code></pre><div class="buttonGroup_V0Br"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_KMRO" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_D2ly"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_sKd7"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_awSM" id="invalid-memory-access">Invalid memory access<a href="https://kkimdev.github.io/blog/2019/04/22/Rust-Compile-Time-Memory-Safety#invalid-memory-access" class="hash-link" aria-label="Direct link to Invalid memory access" title="Direct link to Invalid memory access">​</a></h4>
<ul>
<li>
<p>C++</p>
<div class="language-cpp codeBlockContainer_RXBV theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_wPkZ"><pre tabindex="0" class="prism-code language-cpp codeBlock_KKOe thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_B95v"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token operator" style="color:rgb(0, 0, 0)">*</span><span class="token plain"> x </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token operator" style="color:rgb(0, 0, 0)">*</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token number" style="color:rgb(9, 134, 88)">1234</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token operator" style="color:rgb(0, 0, 0)">*</span><span class="token plain">x </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">5</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// Runtime invalid memory access</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// Segmentation fault (core dumped)</span><br></span></code></pre><div class="buttonGroup_V0Br"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_KMRO" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_D2ly"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_sKd7"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Rust</p>
<div class="language-rust codeBlockContainer_RXBV theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_wPkZ"><pre tabindex="0" class="prism-code language-rust codeBlock_KKOe thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_B95v"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">let</span><span class="token plain"> x </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">1234</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">as</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">*</span><span class="token keyword" style="color:rgb(0, 0, 255)">mut</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">i32</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token operator" style="color:rgb(0, 0, 0)">*</span><span class="token plain">x </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">5</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// Compile error</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   |</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   | *x = 5;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   | ^^^^^^ dereference of raw pointer</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   |</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior</span><br></span></code></pre><div class="buttonGroup_V0Br"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_KMRO" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_D2ly"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_sKd7"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_awSM" id="dangling-pointer--variable">Dangling pointer / variable<a href="https://kkimdev.github.io/blog/2019/04/22/Rust-Compile-Time-Memory-Safety#dangling-pointer--variable" class="hash-link" aria-label="Direct link to Dangling pointer / variable" title="Direct link to Dangling pointer / variable">​</a></h4>
<ul>
<li>
<p>C++</p>
<div class="language-cpp codeBlockContainer_RXBV theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_wPkZ"><pre tabindex="0" class="prism-code language-cpp codeBlock_KKOe thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_B95v"><span class="token-line" style="color:#000000"><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">string_view </span><span class="token function" style="color:rgb(0, 0, 255)">get_extension</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">string filename</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">return</span><span class="token plain"> filename</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token function" style="color:rgb(0, 0, 255)">substr</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">filename</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token function" style="color:rgb(0, 0, 255)">find_last_of</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token char" style="color:rgb(129, 31, 63)">'.'</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">1</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token comment" style="color:rgb(0, 128, 0)">// Returning dangling std::string_view at runtime.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><br></span></code></pre><div class="buttonGroup_V0Br"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_KMRO" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_D2ly"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_sKd7"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Rust</p>
<div class="language-rust codeBlockContainer_RXBV theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_wPkZ"><pre tabindex="0" class="prism-code language-rust codeBlock_KKOe thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_B95v"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(0, 0, 255)">get_extension</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">filename</span><span class="token punctuation" style="color:rgb(4, 81, 165)">:</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">String</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">-&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&amp;</span><span class="token lifetime-annotation symbol">'static</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">str</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">return</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&amp;</span><span class="token plain">filename</span><span class="token punctuation" style="color:rgb(4, 81, 165)">[</span><span class="token plain">filename</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token function" style="color:rgb(0, 0, 255)">rfind</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token char" style="color:rgb(129, 31, 63)">'.'</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token function" style="color:rgb(0, 0, 255)">unwrap</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token operator" style="color:rgb(0, 0, 0)">+</span><span class="token number" style="color:rgb(9, 134, 88)">1</span><span class="token punctuation" style="color:rgb(4, 81, 165)">..</span><span class="token punctuation" style="color:rgb(4, 81, 165)">]</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token comment" style="color:rgb(0, 128, 0)">// Compile error</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token comment" style="color:rgb(0, 128, 0)">// error[E0515]: cannot return value referencing function parameter `filename`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token comment" style="color:rgb(0, 128, 0)">//   |</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token comment" style="color:rgb(0, 128, 0)">//   | return &amp;filename[filename.rfind('.').unwrap()+1..];</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token comment" style="color:rgb(0, 128, 0)">//   |        ^--------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token comment" style="color:rgb(0, 128, 0)">//   |        ||</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token comment" style="color:rgb(0, 128, 0)">//   |        |`filename` is borrowed here</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token comment" style="color:rgb(0, 128, 0)">//   |        returns a value referencing data owned by the current function</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token comment" style="color:rgb(0, 128, 0)">//   }</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token comment" style="color:rgb(0, 128, 0)">//</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><br></span></code></pre><div class="buttonGroup_V0Br"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_KMRO" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_D2ly"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_sKd7"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_awSM" id="incorrectly-using-a-moved-object">Incorrectly using a moved object<a href="https://kkimdev.github.io/blog/2019/04/22/Rust-Compile-Time-Memory-Safety#incorrectly-using-a-moved-object" class="hash-link" aria-label="Direct link to Incorrectly using a moved object" title="Direct link to Incorrectly using a moved object">​</a></h4>
<ul>
<li>
<p>C++</p>
<div class="language-cpp codeBlockContainer_RXBV theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_wPkZ"><pre tabindex="0" class="prism-code language-cpp codeBlock_KKOe thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_B95v"><span class="token-line" style="color:#000000"><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">vector</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"> x </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token number" style="color:rgb(9, 134, 88)">1</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">2</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">3</span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token function" style="color:rgb(0, 0, 255)">process</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token function" style="color:rgb(0, 0, 255)">move</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">x</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token function" style="color:rgb(0, 0, 255)">push_back</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token number" style="color:rgb(9, 134, 88)">4</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// Using an unspecified state object at runtime</span><br></span></code></pre><div class="buttonGroup_V0Br"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_KMRO" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_D2ly"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_sKd7"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Rust</p>
<div class="language-rust codeBlockContainer_RXBV theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_wPkZ"><pre tabindex="0" class="prism-code language-rust codeBlock_KKOe thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_B95v"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">let</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">mut</span><span class="token plain"> x </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token macro property">vec!</span><span class="token punctuation" style="color:rgb(4, 81, 165)">[</span><span class="token number" style="color:rgb(9, 134, 88)">1</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">2</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">3</span><span class="token punctuation" style="color:rgb(4, 81, 165)">]</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token function" style="color:rgb(0, 0, 255)">process</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">x</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token function" style="color:rgb(0, 0, 255)">push</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token number" style="color:rgb(9, 134, 88)">4</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// Compile error</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// error[E0382]: borrow of moved value: `x`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   |</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   | let mut x = vec![1, 2, 3];</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   |     ----- move occurs because `x` has type `std::vec::Vec&lt;i32&gt;`, which does not implement the `Copy` trait</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   | process(x);</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   |         - value moved here</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   | x.push(4);</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   | ^ value borrowed here after move</span><br></span></code></pre><div class="buttonGroup_V0Br"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_KMRO" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_D2ly"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_sKd7"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_awSM" id="data-race-in-multithreading">Data race in multithreading<a href="https://kkimdev.github.io/blog/2019/04/22/Rust-Compile-Time-Memory-Safety#data-race-in-multithreading" class="hash-link" aria-label="Direct link to Data race in multithreading" title="Direct link to Data race in multithreading">​</a></h4>
<ul>
<li>
<p>C++</p>
<div class="language-cpp codeBlockContainer_RXBV theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_wPkZ"><pre tabindex="0" class="prism-code language-cpp codeBlock_KKOe thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_B95v"><span class="token-line" style="color:#000000"><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="color:rgb(0, 0, 255)">include</span><span class="token macro property string" style="color:rgb(163, 21, 21)">&lt;iostream&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="color:rgb(0, 0, 255)">include</span><span class="token macro property string" style="color:rgb(163, 21, 21)">&lt;thread&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="color:rgb(0, 0, 255)">include</span><span class="token macro property string" style="color:rgb(163, 21, 21)">&lt;vector&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">static</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> MONEY </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">0</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">deposit_money</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> amount</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> i </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">0</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"> i </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain"> amount</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">++</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token operator" style="color:rgb(0, 0, 0)">++</span><span class="token plain">MONEY</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token comment" style="color:rgb(0, 128, 0)">// Runtime data race.  Some increments can be ignored.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">main</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">vector</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">thread</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"> threads</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">for</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> i </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">0</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"> i </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">100</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">++</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        threads</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token function" style="color:rgb(0, 0, 255)">emplace_back</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">deposit_money</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">10000</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">for</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> i </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">0</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"> i </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">100</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">++</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        threads</span><span class="token punctuation" style="color:rgb(4, 81, 165)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(4, 81, 165)">]</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token function" style="color:rgb(0, 0, 255)">join</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token comment" style="color:rgb(0, 128, 0)">// The result might not be 1000000 due to the data race.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">cout </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;&lt;</span><span class="token plain"> MONEY</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><br></span></code></pre><div class="buttonGroup_V0Br"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_KMRO" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_D2ly"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_sKd7"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Rust</p>
<div class="language-rust codeBlockContainer_RXBV theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_wPkZ"><pre tabindex="0" class="prism-code language-rust codeBlock_KKOe thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_B95v"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">static</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">mut</span><span class="token plain"> </span><span class="token constant" style="color:rgb(129, 31, 63)">MONEY</span><span class="token punctuation" style="color:rgb(4, 81, 165)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">i32</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">0</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(0, 0, 255)">deposit_money</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">amount</span><span class="token punctuation" style="color:rgb(4, 81, 165)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">i32</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">for</span><span class="token plain"> _ </span><span class="token keyword" style="color:rgb(0, 0, 255)">in</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">0</span><span class="token punctuation" style="color:rgb(4, 81, 165)">..</span><span class="token plain">amount </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token constant" style="color:rgb(129, 31, 63)">MONEY</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">+=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">1</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token comment" style="color:rgb(0, 128, 0)">// Compile error</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token comment" style="color:rgb(0, 128, 0)">// error[E0133]: use of mutable static is unsafe and requires unsafe function or block</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token comment" style="color:rgb(0, 128, 0)">//   |</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token comment" style="color:rgb(0, 128, 0)">//   |     MONEY += 1;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token comment" style="color:rgb(0, 128, 0)">//   |     ^^^^^^^^^^ use of mutable static</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token comment" style="color:rgb(0, 128, 0)">//   |</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token comment" style="color:rgb(0, 128, 0)">//   = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(0, 0, 255)">main</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">let</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">mut</span><span class="token plain"> threads </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token macro property">vec!</span><span class="token punctuation" style="color:rgb(4, 81, 165)">[</span><span class="token punctuation" style="color:rgb(4, 81, 165)">]</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">for</span><span class="token plain"> _ </span><span class="token keyword" style="color:rgb(0, 0, 255)">in</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">0</span><span class="token punctuation" style="color:rgb(4, 81, 165)">..</span><span class="token number" style="color:rgb(9, 134, 88)">100</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token keyword" style="color:rgb(0, 0, 255)">let</span><span class="token plain"> thread </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token namespace">std</span><span class="token namespace punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token namespace">thread</span><span class="token namespace punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token function" style="color:rgb(0, 0, 255)">spawn</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token closure-params closure-punctuation punctuation" style="color:rgb(4, 81, 165)">|</span><span class="token closure-params closure-punctuation punctuation" style="color:rgb(4, 81, 165)">|</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">deposit_money</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token number" style="color:rgb(9, 134, 88)">10000</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        threads</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token function" style="color:rgb(0, 0, 255)">push</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">thread</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">for</span><span class="token plain"> thread </span><span class="token keyword" style="color:rgb(0, 0, 255)">in</span><span class="token plain"> threads </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token keyword" style="color:rgb(0, 0, 255)">let</span><span class="token plain"> _ </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> thread</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token function" style="color:rgb(0, 0, 255)">join</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token macro property">println!</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token string" style="color:rgb(163, 21, 21)">"{}"</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token constant" style="color:rgb(129, 31, 63)">MONEY</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><br></span></code></pre><div class="buttonGroup_V0Br"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_KMRO" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_D2ly"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_sKd7"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ul>
<p>To make these static memory checks possible, Rust enforces single mutable
ownership or multiple read-only aliases at a time. In fact, they are very good
idioms to structure large codebase anyways, and normally they do not get in the
way for ordinary applications. For libraries that require fine-grained memory
control like data containers, e.g., vector, list, and hash map,
<a href="https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html" target="_blank" rel="noopener noreferrer"><code>unsafe</code> keyword</a> is
available to bypass the restrictions.</p>
<p>To be fair, there are compiler options or external tools that we can use to
detect C++ memory issues, but it's nowhere close to the completeness of Rust due
to the implementation complexity and the inherent language spec limitations.</p>
<ul>
<li><code>-Wall -Wextra</code> compiler options: Even for the above trivial examples, GCC 8.3
and Clang 8.0 could only detect the one case, uninitialized variable, out of
the five cases.</li>
<li>External tools, e.g., Valgrind, Address/Memory/Thread Sanitizers: They are
great tools. However in practice, being able to detect at compile time vs
runtime is a big difference as the detection is limited to the specific test
cases that we have. Otherwise, there would be no need for static typing for
correctness as we can run tests to catch the type errors.</li>
</ul>
<h1>How Rust is received</h1>
<p>Rust has been consistently ranked #1 in
<a href="https://insights.stackoverflow.com/survey/2019#technology-_-most-loved-dreaded-and-wanted-languages" target="_blank" rel="noopener noreferrer">Stack Overflow developer survey's most loved programming languages category</a>
for 4 years in a row, followed by Python #2, Typescript #3, and Kotlin #4
in 2019.</p>
<p>Also, it got favorable comments from some of the highly regarded C/C++
programmers:</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/John_Carmack" target="_blank" rel="noopener noreferrer">John Carmack</a>:
<a href="https://twitter.com/id_aa_carmack/status/1094419108781789184?lang=en" target="_blank" rel="noopener noreferrer">"...writing Rust code feels very wholesome."</a></li>
<li><a href="https://en.wikipedia.org/wiki/Linus_Torvalds" target="_blank" rel="noopener noreferrer">Linus Torvalds</a>:
<a href="https://www.infoworld.com/article/3109150/linux-at-25-linus-torvalds-on-the-evolution-and-future-of-linux.html" target="_blank" rel="noopener noreferrer">"...We've had the system people who used Modula-2 or Ada, and I have to say Rust looks a lot better than either of those two disasters."</a></li>
<li><a href="https://en.wikipedia.org/wiki/Miguel_de_Icaza" target="_blank" rel="noopener noreferrer">Miguel Icaza</a>:
<a href="https://www.reddit.com/r/programmerchat/comments/4dxpcp/i_am_miguel_de_icaza_i_started_xamarin_mono_gnome/d1ve1k5?utm_source=share&amp;utm_medium=web2x" target="_blank" rel="noopener noreferrer">"...I have been following an OS written entirely in Rust, and it has great idioms."</a></li>
</ul>
<h1>Rust in production</h1>
<ul>
<li><a href="https://chromium.googlesource.com/chromiumos/platform/crosvm/" target="_blank" rel="noopener noreferrer">Google Chrome Crosvm</a></li>
<li><a href="https://www.theregister.co.uk/2016/10/18/facebook_mercurial_devs_forget_git/" target="_blank" rel="noopener noreferrer">Facebook's new Mercurial server</a></li>
<li><a href="https://www.reddit.com/r/rust/comments/a0rph0/aws_firecracker_microvm_is_all_rust/" target="_blank" rel="noopener noreferrer">Amazon AWS Firecracker</a></li>
<li><a href="https://github.com/Azure/iotedge/tree/master/edgelet" target="_blank" rel="noopener noreferrer">Microsoft Azure IoT Edge</a></li>
<li><a href="https://github.com/stratis-storage" target="_blank" rel="noopener noreferrer">Red Hat Stratis storage</a></li>
<li><a href="https://qconsf.com/sf2016/sf2016/presentation/going-rust-optimizing-storage-dropbox.html" target="_blank" rel="noopener noreferrer">Dropbox storage optimization</a></li>
<li><a href="https://servo.org/" target="_blank" rel="noopener noreferrer">Mozilla Servo</a></li>
<li><a href="https://blog.cloudflare.com/enjoy-a-slice-of-quic-and-rust/" target="_blank" rel="noopener noreferrer">Cloudflare's QUIC protocol implementation</a></li>
<li><a href="https://www.youtube.com/watch?v=GCsxYAxw3JQ" target="_blank" rel="noopener noreferrer">NPM</a></li>
<li><a href="https://twitter.com/bltroutwine/status/1002234680949719040" target="_blank" rel="noopener noreferrer">Unity data engineering</a></li>
<li><a href="https://twitter.com/stuhood/status/978410393944047617?s=19" target="_blank" rel="noopener noreferrer">Twitter build team</a></li>
<li><a href="https://www.reddit.com/r/rust/comments/7utj4t/reddit_is_hiring_a_senior_rust_engineer/" target="_blank" rel="noopener noreferrer">Reddit comment parsing</a></li>
</ul>
<h1>Conclusion</h1>
<p>This is just one example why Rust is compelling, and there are so many other
things that Rust got it right. Hopefully it was interesting enough for you to
read more about Rust!</p>
<h1>References</h1>
<ul>
<li><a href="https://www.jonathanturner.org/2017/10/fun-facts-about-rust-growth.html" target="_blank" rel="noopener noreferrer">https://www.jonathanturner.org/2017/10/fun-facts-about-rust-growth.html</a></li>
<li><a href="https://www.jonathanturner.org/2018/07/snapshot-of-rust-popularity.html" target="_blank" rel="noopener noreferrer">https://www.jonathanturner.org/2018/07/snapshot-of-rust-popularity.html</a></li>
<li><a href="https://users.rust-lang.org/t/rust-quotes-and-press/5405" target="_blank" rel="noopener noreferrer">https://users.rust-lang.org/t/rust-quotes-and-press/5405</a></li>
<li><a href="https://www.rust-lang.org/production/users" target="_blank" rel="noopener noreferrer">https://www.rust-lang.org/production/users</a></li>
</ul>]]></content>
        <author>
            <name>Kibeom Kim</name>
            <uri>/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[IEEE 754 Floating Point Type in C++]]></title>
        <id>https://kkimdev.github.io/blog/2018/06/15/IEEE-754-Floating-Point-Type-in-C++</id>
        <link href="https://kkimdev.github.io/blog/2018/06/15/IEEE-754-Floating-Point-Type-in-C++"/>
        <updated>2018-06-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Let's say we want to use IEEE 754 32/64bit floating point types in C++, then]]></summary>
        <content type="html"><![CDATA[<p>Let's say we want to use IEEE 754 32/64bit floating point types in C++, then
there is <code>float</code> and <code>double</code> right? Unfortunately, C++ standard guarantees
almost nothing about the built-in floating point types.</p>
<blockquote>
<p><a href="http://eel.is/c++draft/basic.fundamental#8" target="_blank" rel="noopener noreferrer">§ 6.7.1.8</a> There are three
floating-point types: float, double, and long double. The type double provides
at least as much precision as float, and the type long double provides at
least as much precision as double. The set of values of the type float is a
subset of the set of values of the type double; the set of values of the type
double is a subset of the set of values of the type long double. <strong>The value
representation of floating-point types is implementation-defined</strong>. ...</p>
</blockquote>
<p>So are we just doomed? No! There is
<a href="http://en.cppreference.com/w/cpp/types/numeric_limits" target="_blank" rel="noopener noreferrer">std::numeric_limits</a>
that gives various floating point type trait information, and neat C++ compile
time tricks we can use to craft a clean type API. So let's try. The goal is to
construct the following IEEE754 floating point types.</p>
<div class="language-cpp codeBlockContainer_RXBV theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_wPkZ"><pre tabindex="0" class="prism-code language-cpp codeBlock_KKOe thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_B95v"><span class="token-line" style="color:#000000"><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="color:rgb(0, 0, 255)">include</span><span class="token macro property"> </span><span class="token macro property string" style="color:rgb(163, 21, 21)">&lt;iostream&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="color:rgb(0, 0, 255)">include</span><span class="token macro property"> </span><span class="token macro property string" style="color:rgb(163, 21, 21)">"ieee754_types.hpp"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">main</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  IEEE_754_2008_Binary</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token number" style="color:rgb(9, 134, 88)">32</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"> x </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">1.0</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  IEEE_754_2008_Binary</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token number" style="color:rgb(9, 134, 88)">64</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"> y </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">2.0</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">cout </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;&lt;</span><span class="token plain"> x </span><span class="token operator" style="color:rgb(0, 0, 0)">+</span><span class="token plain"> y </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;&lt;</span><span class="token plain"> std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">endl</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token comment" style="color:rgb(0, 128, 0)">// Compile time error if the requested type doesn't exist in the system.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token comment" style="color:rgb(0, 128, 0)">// IEEE_754_2008_Binary&lt;16&gt; z;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><br></span></code></pre><div class="buttonGroup_V0Br"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_KMRO" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_D2ly"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_sKd7"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>IEEE_754_2008_Binary&lt;n&gt;</code> is n-bit IEEE 754 floating point type. Of course, for
most systems, <code>IEEE_754_2008_Binary&lt;32&gt;</code> is <code>float</code> and
<code>IEEE_754_2008_Binary&lt;64&gt;</code> is <code>double</code>. In case the requested type is not
available, like <code>IEEE_754_2008_Binary&lt;16&gt;</code>, it should cause a compile error with
a clear error message.</p>
<p>Well, I guess a natural question at this point is: "Do we really need this?
Can't we just assume <code>float</code> and <code>double</code> are IEEE 754 because they actually are
for the 99.9% systems out there?". I thought so, but then later, I've found that
people have submitted related proposals,
<a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1703.pdf" target="_blank" rel="noopener noreferrer">N1703</a>,
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3626.pdf" target="_blank" rel="noopener noreferrer">N3626</a>, to
C/C++ standards committee to fix this issue with additional standard types,
<code>float16_t</code>, <code>float32_t</code>, <code>float64_t</code>, and <code>float128_t</code>. So maybe it's not
entirely pointless after all. Anyways, let's get started.</p>
<p>First, let's begin with checking if a given type, <code>T</code>, fulfills IEEE 754 and
other desired conditions.</p>
<div class="language-cpp codeBlockContainer_RXBV theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_wPkZ"><pre tabindex="0" class="prism-code language-cpp codeBlock_KKOe thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_B95v"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> storage_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> exponent_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> mantissa_bits</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">struct</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">Is_Ieee754_2008_Binary_Interchange_Format</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">static</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">constexpr</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">bool</span><span class="token plain"> value </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">      </span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token generic-function function" style="color:rgb(0, 0, 255)">is_floating_point</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">T</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain">            </span><span class="token operator" style="color:rgb(0, 0, 0)">&amp;&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">      </span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">numeric_limits</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">is_iec559      </span><span class="token operator" style="color:rgb(0, 0, 0)">&amp;&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">      </span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">numeric_limits</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">radix </span><span class="token operator" style="color:rgb(0, 0, 0)">==</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">2</span><span class="token plain">     </span><span class="token operator" style="color:rgb(0, 0, 0)">&amp;&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">      </span><span class="token generic-function function" style="color:rgb(0, 0, 255)">get_storage_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">T</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">==</span><span class="token plain"> storage_bits    </span><span class="token operator" style="color:rgb(0, 0, 0)">&amp;&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">      </span><span class="token generic-function function" style="color:rgb(0, 0, 255)">get_exponent_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">T</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">==</span><span class="token plain"> exponent_bits  </span><span class="token operator" style="color:rgb(0, 0, 0)">&amp;&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">      </span><span class="token generic-function function" style="color:rgb(0, 0, 255)">get_mantissa_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">T</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">==</span><span class="token plain"> mantissa_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><br></span></code></pre><div class="buttonGroup_V0Br"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_KMRO" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_D2ly"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_sKd7"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We used
<a href="https://en.cppreference.com/w/cpp/language/variable_template" target="_blank" rel="noopener noreferrer">variable template</a>
for the type dependent boolean value computation, and also wrapped by a template
struct so that we can pass it around easily as a type template parameter later.</p>
<p>First, we check if <code>T</code> compiles IEEE 754 (equivalently,
<a href="https://www.iso.org/standard/57469.html" target="_blank" rel="noopener noreferrer">IEC 60559</a>) with
<a href="https://en.cppreference.com/w/cpp/types/numeric_limits/is_iec559" target="_blank" rel="noopener noreferrer"><code>std::is_iec559</code></a>.
We should also check <code>radix == 2</code> since IEEE 754 defines two types of floating
points, binary and decimal. Finally, we check if <code>T</code> has the requested number of
storage(width), exponent, and mantissa bits. IEEE 754 defines the standard
number of exponent and mantissa bits for certain sizes, 16, 32, 64, 128, 160,
..., but it also allows implementations to have arbitrary sizes and bits (e.g.,
<a href="https://en.wikipedia.org/wiki/Extended_precision#x86_extended_precision_format" target="_blank" rel="noopener noreferrer">x86 extended precision format</a>),
so we need to check that if <code>T</code> has the exact format we want.</p>
<p>We can calculate the number of bits of <code>T</code> with the following simple compile
time functions.</p>
<div class="language-cpp codeBlockContainer_RXBV theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_wPkZ"><pre tabindex="0" class="prism-code language-cpp codeBlock_KKOe thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_B95v"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">constexpr</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">get_storage_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">return</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">sizeof</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">T</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">*</span><span class="token plain"> CHAR_BIT</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">constexpr</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">get_exponent_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> exponent_range </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">numeric_limits</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">max_exponent </span><span class="token operator" style="color:rgb(0, 0, 0)">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">                       </span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">numeric_limits</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">min_exponent</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> bits </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">0</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">while</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">exponent_range </span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;&gt;</span><span class="token plain"> bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">0</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">++</span><span class="token plain">bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">return</span><span class="token plain"> bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">constexpr</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">get_mantissa_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">return</span><span class="token plain"> </span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">numeric_limits</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">digits </span><span class="token operator" style="color:rgb(0, 0, 0)">-</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">1</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><br></span></code></pre><div class="buttonGroup_V0Br"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_KMRO" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_D2ly"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_sKd7"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>For the mantissa bits, the leading bit is implicit so we need to subtract 1. For
the exponent bits, there is no direct property available in
<code>std::numeric_limits</code> so instead we calculate the minimum number of bits
required to represent its exponent range.</p>
<p>Now, we have everything needed to figure out if the given <code>T</code> is the type we're
looking for. The next step is to automatically select such type among the
built-in floating point types, <code>float</code>, <code>double</code>, and <code>long double</code>, given the
size in bits, e.g., 32, 64. This is where it gets interesting.</p>
<p>The following <code>find_type()</code> recursive function selects a type among <code>T</code> and <code>Ts</code>
that satisfies the condition <code>C</code>. In our case, <code>T</code> and <code>Ts</code> are
<code>float, double, long double</code>, and <code>C</code> is the struct we defined previously,
<code>Is_Ieee754_2008_Binary_Interchange_Format&lt;storage_bits, exponent_bits, storage_bits, mantissa_bits&gt;</code>.</p>
<div class="language-cpp codeBlockContainer_RXBV theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_wPkZ"><pre tabindex="0" class="prism-code language-cpp codeBlock_KKOe thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_B95v"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">C</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token plain"> Ts</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">constexpr</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">auto</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">find_type</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">throw</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">if</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">constexpr</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">C</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> value</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">return</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">T</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">else</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">if</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">constexpr</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token keyword" style="color:rgb(0, 0, 255)">sizeof</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">Ts</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">1</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">return</span><span class="token plain"> </span><span class="token generic-function function" style="color:rgb(0, 0, 255)">find_type</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">C</span><span class="token generic-function generic class-name punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)"> Ts</span><span class="token generic-function generic class-name punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token generic-function generic class-name punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token generic-function generic class-name punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">else</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">return</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">void</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><br></span></code></pre><div class="buttonGroup_V0Br"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_KMRO" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_D2ly"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_sKd7"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>typename... Ts</code> is a
<a href="https://en.cppreference.com/w/cpp/language/parameter_pack" target="_blank" rel="noopener noreferrer">parameter pack</a> that
can match any number of types. So <code>T</code> will be <code>float</code> and <code>Ts</code> will be
<code>double, long double</code>. The first if condition, <code>C::template value&lt;T&gt;</code> checks if
<code>T</code> satisfies the condition given by <code>C</code>, if so, it returns a default instance
of <code>T</code>. The second if condition, <code>sizeof...(Ts) &gt;= 1</code>, checks if there are more
types in <code>Ts</code> to exam, if so, it recursively calls itself, <code>find_type()</code>, with
<code>Ts</code> to continue the search. Finally, if there is nothing in <code>Ts</code>, it returns a
void instance.</p>
<p>Note that since the return type of <code>find_type()</code> is <code>auto</code>, the return type will
be deduced to what <code>find_type()</code> returns at compile time. In addition,
<a href="http://en.cppreference.com/w/cpp/language/if#Constexpr_If" target="_blank" rel="noopener noreferrer"><code>if constexpr</code></a>
discards the unused conditional paths at compile time, so even though
<code>find_type()</code> has multiple return statements with different types, it compiles
successfully.</p>
<p>Since <code>find_type()</code>'s return type is what we need, we can do
<code>decltype(find_type&lt;...&gt;())</code> to get that. The statement <code>throw;</code> at the first
line of <code>find_type()</code> is not necessary but it's there to indicate that
<code>find_type()</code> is not supposed to be called directly.</p>
<p>The following code defines <code>BinaryFloatOrVoid</code> type using
<code>decltype(find_type&lt;...&gt;())</code>. The newly defined type, <code>BinaryFloatOrVoid</code>, will
be a IEEE754 floating point type that matches the given storage, exponent, and
mantissa bits, or <code>void</code> if the search fails.</p>
<div class="language-cpp codeBlockContainer_RXBV theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_wPkZ"><pre tabindex="0" class="prism-code language-cpp codeBlock_KKOe thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_B95v"><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> storage_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">          </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> exponent_bits </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">              </span><span class="token generic-function function" style="color:rgb(0, 0, 255)">standard_binary_interchange_format_exponent_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">storage_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">          </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> mantissa_bits </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">              </span><span class="token generic-function function" style="color:rgb(0, 0, 255)">standard_binary_interchange_format_mantissa_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">storage_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">using</span><span class="token plain"> BinaryFloatOrVoid </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">decltype</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">find_type</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">                                                </span><span class="token comment" style="color:rgb(0, 128, 0)">//</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">             Is_Ieee754_2008_Binary_Interchange_Format</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">storage_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain">   </span><span class="token comment" style="color:rgb(0, 128, 0)">//</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">                                                       exponent_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain">  </span><span class="token comment" style="color:rgb(0, 128, 0)">//</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">                                                       mantissa_bits</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">             </span><span class="token keyword" style="color:rgb(0, 0, 255)">float</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">double</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">long</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">double</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><br></span></code></pre><div class="buttonGroup_V0Br"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_KMRO" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_D2ly"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_sKd7"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>standard_binary_interchange_format_exponent_bits()</code> and
<code>standard_binary_interchange_format_mantissa_bits()</code> functions just return the
number of standard exponent and mantissa bits respectively, and we set them as
the default values for <code>exponent_bits</code> and <code>mantissa_bits</code> for convenience. I
will omit their actual implementations as it's pretty straightforward and
uninteresting.</p>
<p>Traditionally, before <code>if constexpr</code> was available in C++17, this kind of
compile time type manipulation was implemented with
<a href="https://en.wikipedia.org/wiki/Substitution_failure_is_not_an_error" target="_blank" rel="noopener noreferrer">SFINAE</a>.
The following code shows how it can be done in that way.</p>
<div class="language-cpp codeBlockContainer_RXBV theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_wPkZ"><pre tabindex="0" class="prism-code language-cpp codeBlock_KKOe thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_B95v"><span class="token-line" style="color:#000000"><span class="token comment" style="color:rgb(0, 128, 0)">// Recursion termination.  Type not found.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">C</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token plain"> Ts</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">struct</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">FindType</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">using</span><span class="token plain"> type </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">void</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// Recursion</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">C</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token plain"> Ts</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">struct</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">FindType</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">C</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> T</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> Ts</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token comment" style="color:rgb(0, 128, 0)">// Set `type = T` if T satisfies the condition, C.  Otherwise, keep</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token comment" style="color:rgb(0, 128, 0)">// searching in the remaining types, Ts... .</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">using</span><span class="token plain"> type </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">conditional_t</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">  </span><span class="token comment" style="color:rgb(0, 128, 0)">//</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">      C</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> value</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> T</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">FindType</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">C</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> Ts</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">type</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> storage_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">          </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> exponent_bits </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">              </span><span class="token generic-function function" style="color:rgb(0, 0, 255)">standard_binary_interchange_format_exponent_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">storage_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">          </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> mantissa_bits </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">              </span><span class="token generic-function function" style="color:rgb(0, 0, 255)">standard_binary_interchange_format_mantissa_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">storage_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">using</span><span class="token plain"> BinaryFloatOrVoid </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">FindType</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">                  </span><span class="token comment" style="color:rgb(0, 128, 0)">//</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    Is_Ieee754_2008_Binary_Interchange_Format</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">storage_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain">   </span><span class="token comment" style="color:rgb(0, 128, 0)">//</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">                                              exponent_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain">  </span><span class="token comment" style="color:rgb(0, 128, 0)">//</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">                                              mantissa_bits</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">float</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">double</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">long</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">double</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">type</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><br></span></code></pre><div class="buttonGroup_V0Br"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_KMRO" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_D2ly"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_sKd7"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Clearly, the <code>if constexpr</code> version is simpler and a lot more readable, and I
expect to see less of the SFINAE mess thanks to <code>if constexpr</code> (and hopefully
<a href="https://en.wikipedia.org/wiki/Concepts_(C%2B%2B)" target="_blank" rel="noopener noreferrer">concepts</a>) in the future.</p>
<p>Lastly, we introduce another type layer to cause a compile error with a nice
error message, in case the requested type is not available, i.e.,
<code>BinaryFloatOrVoid</code> is <code>void</code>.</p>
<div class="language-cpp codeBlockContainer_RXBV theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_wPkZ"><pre tabindex="0" class="prism-code language-cpp codeBlock_KKOe thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_B95v"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">struct</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">AssertTypeFound</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">static_assert</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">      </span><span class="token operator" style="color:rgb(0, 0, 0)">!</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">is_same_v</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">T</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">void</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">      </span><span class="token string" style="color:rgb(163, 21, 21)">"No corresponding IEEE 754-2008 binary interchange format found."</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">using</span><span class="token plain"> type </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> T</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> storage_bits</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">using</span><span class="token plain"> IEEE_754_2008_Binary </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">AssertTypeFound</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    BinaryFloatOrVoid</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">storage_bits</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;&gt;</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">type</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><br></span></code></pre><div class="buttonGroup_V0Br"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_KMRO" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_D2ly"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_sKd7"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>OK, finally, we have constructed the type <code>IEEE_754_2008_Binary&lt;n&gt;</code> that
guarantees IEEE 754 standard binary interchange format. Yay!</p>
<p>So are we done now? Not quite, there is one last step that every programmer
loves: writing tests. :)</p>
<div class="language-cpp codeBlockContainer_RXBV theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_wPkZ"><pre tabindex="0" class="prism-code language-cpp codeBlock_KKOe thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_B95v"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> storage_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> exponent_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> mantissa_bits</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">test_if_type_exists</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">throw</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">if</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">constexpr</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token operator" style="color:rgb(0, 0, 0)">!</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">is_same_v</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">BinaryFloatOrVoid</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">storage_bits</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">void</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">using</span><span class="token plain"> T </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> IEEE_754_2008_Binary</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">storage_bits</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">static_assert</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token generic-function function" style="color:rgb(0, 0, 255)">is_floating_point</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">T</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(163, 21, 21)">""</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">static_assert</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">numeric_limits</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">is_iec559</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(163, 21, 21)">""</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">static_assert</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">numeric_limits</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">radix </span><span class="token operator" style="color:rgb(0, 0, 0)">==</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">2</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(163, 21, 21)">""</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">static_assert</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token generic-function function" style="color:rgb(0, 0, 255)">get_storage_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">T</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">==</span><span class="token plain"> storage_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(163, 21, 21)">""</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">static_assert</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token generic-function function" style="color:rgb(0, 0, 255)">get_exponent_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">T</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">==</span><span class="token plain"> exponent_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(163, 21, 21)">""</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">static_assert</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token generic-function function" style="color:rgb(0, 0, 255)">get_mantissa_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">T</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">==</span><span class="token plain"> mantissa_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(163, 21, 21)">""</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">tests</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">throw</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token generic-function function" style="color:rgb(0, 0, 255)">test_if_type_exists</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name number" style="color:rgb(9, 134, 88)">16</span><span class="token generic-function generic class-name punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)"> </span><span class="token generic-function generic class-name number" style="color:rgb(9, 134, 88)">5</span><span class="token generic-function generic class-name punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)"> </span><span class="token generic-function generic class-name number" style="color:rgb(9, 134, 88)">10</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token generic-function function" style="color:rgb(0, 0, 255)">test_if_type_exists</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name number" style="color:rgb(9, 134, 88)">32</span><span class="token generic-function generic class-name punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)"> </span><span class="token generic-function generic class-name number" style="color:rgb(9, 134, 88)">8</span><span class="token generic-function generic class-name punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)"> </span><span class="token generic-function generic class-name number" style="color:rgb(9, 134, 88)">23</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token generic-function function" style="color:rgb(0, 0, 255)">test_if_type_exists</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name number" style="color:rgb(9, 134, 88)">64</span><span class="token generic-function generic class-name punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)"> </span><span class="token generic-function generic class-name number" style="color:rgb(9, 134, 88)">11</span><span class="token generic-function generic class-name punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)"> </span><span class="token generic-function generic class-name number" style="color:rgb(9, 134, 88)">52</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token generic-function function" style="color:rgb(0, 0, 255)">test_if_type_exists</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name number" style="color:rgb(9, 134, 88)">128</span><span class="token generic-function generic class-name punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)"> </span><span class="token generic-function generic class-name number" style="color:rgb(9, 134, 88)">15</span><span class="token generic-function generic class-name punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)"> </span><span class="token generic-function generic class-name number" style="color:rgb(9, 134, 88)">112</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><br></span></code></pre><div class="buttonGroup_V0Br"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_KMRO" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_D2ly"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_sKd7"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Again, all the checks are done at compile time, <code>static_assert</code>, so we don't
need to call <code>test()</code>, and just have to ensure that <code>test_if_type_exists</code>
functions are instantiated. If a type doesn't exists (i.e., 16 and 128 size
types in most systems) then <code>if constexpr</code> will simply discard the checks.</p>
<p>I hope you had fun, like I did. The full implementation is available in this
repository <a href="https://github.com/kkimdev/ieee754-types" target="_blank" rel="noopener noreferrer">https://github.com/kkimdev/ieee754-types</a>.</p>]]></content>
        <author>
            <name>Kibeom Kim</name>
            <uri>/</uri>
        </author>
    </entry>
</feed>