<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Kibeom Kim Blog</title>
        <link>https://kkimdev.github.io/blog</link>
        <description>Kibeom Kim Blog</description>
        <lastBuildDate>Mon, 22 Apr 2019 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Rust - Compile-Time Memory Safety]]></title>
            <link>https://kkimdev.github.io/blog/2019/04/22/Rust-Compile-Time-Memory-Safety</link>
            <guid>https://kkimdev.github.io/blog/2019/04/22/Rust-Compile-Time-Memory-Safety</guid>
            <pubDate>Mon, 22 Apr 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[In this post, I will explain what makes Rust interesting by drawing an analogy between dynamic vs. static typing and the approaches to memory safety in C++ and Rust, without going into too much detail.]]></description>
            <content:encoded><![CDATA[<p>In this post, I will explain what makes Rust interesting by drawing an analogy between dynamic vs. static typing and the approaches to memory safety in C++ and Rust, without going into too much detail.</p>
<p>Static typing prevents type errors at compile time. For example:</p>
<ul>
<li class="">
<p>Python</p>
<div class="language-python codeBlockContainer_JH_B theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_cFO2"><pre tabindex="0" class="prism-code language-python codeBlock_z2x2 thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_RwTv"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">square</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">return</span><span class="token plain"> x </span><span class="token operator" style="color:rgb(0, 0, 0)">*</span><span class="token plain"> x</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">square</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token string" style="color:rgb(163, 21, 21)">"5"</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)"># Runtime error: Can't multiply sequence by non-int of type 'str'</span><br></span></code></pre></div></div>
</li>
<li class="">
<p>C++</p>
<div class="language-cpp codeBlockContainer_JH_B theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_cFO2"><pre tabindex="0" class="prism-code language-cpp codeBlock_z2x2 thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_RwTv"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">square</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> x</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">return</span><span class="token plain"> x </span><span class="token operator" style="color:rgb(0, 0, 0)">*</span><span class="token plain"> x</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token function" style="color:rgb(0, 0, 255)">square</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token string" style="color:rgb(163, 21, 21)">"5"</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// Compile error: Invalid conversion from ‘const char*’ to ‘int’</span><br></span></code></pre></div></div>
</li>
</ul>
<p>Static typing has the following benefits (taken from
<a href="https://www.youtube.com/watch?v=GiZKuyLKvAA&amp;t=702" target="_blank" rel="noopener noreferrer" class="">Guido van Rossum's Stanford seminar</a>):</p>
<ul>
<li class="">Catches (certain) bugs earlier</li>
<li class="">Refactor with confidence</li>
<li class="">Helps human readers navigate large codebases</li>
<li class="">Better than (certain) comments: the compiler keeps you honest</li>
</ul>
<p>In fact, all popular dynamic languages have static typing projects, often backed
by big corporations, as the benefits of static typing become more significant for
larger projects.</p>
<ul>
<li class="">Python: <a href="https://www.python.org/dev/peps/pep-0484/" target="_blank" rel="noopener noreferrer" class="">PEP 484 Type Hints</a>,
<a href="http://mypy-lang.org/index.html" target="_blank" rel="noopener noreferrer" class="">Dropbox Mypy</a></li>
<li class="">JavaScript: <a href="https://www.typescriptlang.org/" target="_blank" rel="noopener noreferrer" class="">Microsoft TypeScript</a>,
<a href="https://developers.google.com/closure/compiler/" target="_blank" rel="noopener noreferrer" class="">Google Closure</a>,
<a href="https://flow.org/" target="_blank" rel="noopener noreferrer" class="">Facebook Flow</a></li>
<li class="">Ruby: <a href="https://sorbet.org/" target="_blank" rel="noopener noreferrer" class="">Stripe Sorbet</a></li>
<li class="">PHP: <a href="https://hacklang.org/" target="_blank" rel="noopener noreferrer" class="">Facebook Hack</a></li>
<li class="">Lua: <a href="https://github.com/dibyendumajumdar/ravi" target="_blank" rel="noopener noreferrer" class="">Ravi</a></li>
</ul>
<h1>Preventing Memory Errors at Compile Time</h1>
<p>Since memory safety is a major practical issue in C++, it would be great if we
could check for memory errors statically, in the same way that static typing checks for type errors.</p>
<p>Indeed, this was one of the main motivations behind Rust's creation. Just as a C++ compiler tracks type information for each variable, the Rust compiler also tracks ownership, lifetime, and aliasing for each variable.</p>
<p>Here is a small list of memory issues that can be statically verified with Rust.</p>
<h4 class="anchor anchorTargetStickyNavbar_zIqo" id="using-an-uninitialized-variable">Using an Uninitialized Variable<a href="https://kkimdev.github.io/blog/2019/04/22/Rust-Compile-Time-Memory-Safety#using-an-uninitialized-variable" class="hash-link" aria-label="Direct link to Using an Uninitialized Variable" title="Direct link to Using an Uninitialized Variable" translate="no">​</a></h4>
<ul>
<li class="">
<p>C++</p>
<div class="language-cpp codeBlockContainer_JH_B theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_cFO2"><pre tabindex="0" class="prism-code language-cpp codeBlock_z2x2 thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_RwTv"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> x</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> y </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">square</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// Passing a garbage value at runtime.</span><br></span></code></pre></div></div>
</li>
<li class="">
<p>Rust</p>
<div class="language-rust codeBlockContainer_JH_B theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_cFO2"><pre tabindex="0" class="prism-code language-rust codeBlock_z2x2 thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_RwTv"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">let</span><span class="token plain"> x</span><span class="token punctuation" style="color:rgb(4, 81, 165)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">i32</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">let</span><span class="token plain"> y </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">square</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// Compile error</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// error[E0381]: use of possibly uninitialized variable: `x`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   |</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   | let y = square(x);</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   |                ^ use of possibly uninitialized `x`</span><br></span></code></pre></div></div>
</li>
</ul>
<h4 class="anchor anchorTargetStickyNavbar_zIqo" id="invalid-memory-access">Invalid Memory Access<a href="https://kkimdev.github.io/blog/2019/04/22/Rust-Compile-Time-Memory-Safety#invalid-memory-access" class="hash-link" aria-label="Direct link to Invalid Memory Access" title="Direct link to Invalid Memory Access" translate="no">​</a></h4>
<ul>
<li class="">
<p>C++</p>
<div class="language-cpp codeBlockContainer_JH_B theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_cFO2"><pre tabindex="0" class="prism-code language-cpp codeBlock_z2x2 thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_RwTv"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token operator" style="color:rgb(0, 0, 0)">*</span><span class="token plain"> x </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token operator" style="color:rgb(0, 0, 0)">*</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token number" style="color:rgb(9, 134, 88)">1234</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token operator" style="color:rgb(0, 0, 0)">*</span><span class="token plain">x </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">5</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// Invalid memory access at runtime.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// Segmentation fault (core dumped)</span><br></span></code></pre></div></div>
</li>
<li class="">
<p>Rust</p>
<div class="language-rust codeBlockContainer_JH_B theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_cFO2"><pre tabindex="0" class="prism-code language-rust codeBlock_z2x2 thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_RwTv"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">let</span><span class="token plain"> x </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">1234</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">as</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">*</span><span class="token keyword" style="color:rgb(0, 0, 255)">mut</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">i32</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token operator" style="color:rgb(0, 0, 0)">*</span><span class="token plain">x </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">5</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// Compile error</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   |</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   | *x = 5;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   | ^^^^^^ dereference of raw pointer</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   |</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior</span><br></span></code></pre></div></div>
</li>
</ul>
<h4 class="anchor anchorTargetStickyNavbar_zIqo" id="dangling-pointervariable">Dangling Pointer/Variable<a href="https://kkimdev.github.io/blog/2019/04/22/Rust-Compile-Time-Memory-Safety#dangling-pointervariable" class="hash-link" aria-label="Direct link to Dangling Pointer/Variable" title="Direct link to Dangling Pointer/Variable" translate="no">​</a></h4>
<ul>
<li class="">
<p>C++</p>
<div class="language-cpp codeBlockContainer_JH_B theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_cFO2"><pre tabindex="0" class="prism-code language-cpp codeBlock_z2x2 thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_RwTv"><span class="token-line" style="color:#000000"><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="color:rgb(0, 0, 255)">include</span><span class="token macro property"> </span><span class="token macro property string" style="color:rgb(163, 21, 21)">&lt;string&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="color:rgb(0, 0, 255)">include</span><span class="token macro property"> </span><span class="token macro property string" style="color:rgb(163, 21, 21)">&lt;string_view&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">string_view </span><span class="token function" style="color:rgb(0, 0, 255)">get_extension</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">string filename</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">return</span><span class="token plain"> filename</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token function" style="color:rgb(0, 0, 255)">substr</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">filename</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token function" style="color:rgb(0, 0, 255)">find_last_of</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token char" style="color:rgb(129, 31, 63)">'.'</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">1</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token comment" style="color:rgb(0, 128, 0)">// Returning a dangling std::string_view at runtime.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><br></span></code></pre></div></div>
</li>
<li class="">
<p>Rust</p>
<div class="language-rust codeBlockContainer_JH_B theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_cFO2"><pre tabindex="0" class="prism-code language-rust codeBlock_z2x2 thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_RwTv"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(0, 0, 255)">get_extension</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">filename</span><span class="token punctuation" style="color:rgb(4, 81, 165)">:</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">String</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">-&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&amp;</span><span class="token lifetime-annotation symbol">'static</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">str</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">return</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&amp;</span><span class="token plain">filename</span><span class="token punctuation" style="color:rgb(4, 81, 165)">[</span><span class="token plain">filename</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token function" style="color:rgb(0, 0, 255)">rfind</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token char" style="color:rgb(129, 31, 63)">'.'</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token function" style="color:rgb(0, 0, 255)">unwrap</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">1</span><span class="token punctuation" style="color:rgb(4, 81, 165)">..</span><span class="token punctuation" style="color:rgb(4, 81, 165)">]</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token comment" style="color:rgb(0, 128, 0)">// Compile error</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token comment" style="color:rgb(0, 128, 0)">// error[E0515]: cannot return value referencing function parameter `filename`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token comment" style="color:rgb(0, 128, 0)">//   |</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token comment" style="color:rgb(0, 128, 0)">//   | return &amp;filename[filename.rfind('.').unwrap()+1..];</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token comment" style="color:rgb(0, 128, 0)">//   |        ^--------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token comment" style="color:rgb(0, 128, 0)">//   |        ||</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token comment" style="color:rgb(0, 128, 0)">//   |        |`filename` is borrowed here</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token comment" style="color:rgb(0, 128, 0)">//   |        returns a value referencing data owned by the current function</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><br></span></code></pre></div></div>
</li>
</ul>
<h4 class="anchor anchorTargetStickyNavbar_zIqo" id="incorrectly-using-a-moved-object">Incorrectly Using a Moved Object<a href="https://kkimdev.github.io/blog/2019/04/22/Rust-Compile-Time-Memory-Safety#incorrectly-using-a-moved-object" class="hash-link" aria-label="Direct link to Incorrectly Using a Moved Object" title="Direct link to Incorrectly Using a Moved Object" translate="no">​</a></h4>
<ul>
<li class="">
<p>C++</p>
<div class="language-cpp codeBlockContainer_JH_B theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_cFO2"><pre tabindex="0" class="prism-code language-cpp codeBlock_z2x2 thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_RwTv"><span class="token-line" style="color:#000000"><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="color:rgb(0, 0, 255)">include</span><span class="token macro property"> </span><span class="token macro property string" style="color:rgb(163, 21, 21)">&lt;vector&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">process</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">vector</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"> v</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">vector</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"> x </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token number" style="color:rgb(9, 134, 88)">1</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">2</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">3</span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token function" style="color:rgb(0, 0, 255)">process</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token function" style="color:rgb(0, 0, 255)">move</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">x</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token function" style="color:rgb(0, 0, 255)">push_back</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token number" style="color:rgb(9, 134, 88)">4</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// Using an object in an unspecified state at runtime.</span><br></span></code></pre></div></div>
</li>
<li class="">
<p>Rust</p>
<div class="language-rust codeBlockContainer_JH_B theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_cFO2"><pre tabindex="0" class="prism-code language-rust codeBlock_z2x2 thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_RwTv"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(0, 0, 255)">process</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">v</span><span class="token punctuation" style="color:rgb(4, 81, 165)">:</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">Vec</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">i32</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">let</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">mut</span><span class="token plain"> x </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token macro property">vec!</span><span class="token punctuation" style="color:rgb(4, 81, 165)">[</span><span class="token number" style="color:rgb(9, 134, 88)">1</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">2</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">3</span><span class="token punctuation" style="color:rgb(4, 81, 165)">]</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token function" style="color:rgb(0, 0, 255)">process</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">x</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token function" style="color:rgb(0, 0, 255)">push</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token number" style="color:rgb(9, 134, 88)">4</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// Compile error</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// error[E0382]: borrow of moved value: `x`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   |</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   | let mut x = vec![1, 2, 3];</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   |     ----- move occurs because `x` has type `std::vec::Vec&lt;i32&gt;`, which does not implement the `Copy` trait</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   | process(x);</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   |         - value moved here</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   | x.push(4);</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">//   | ^ value borrowed here after move</span><br></span></code></pre></div></div>
</li>
</ul>
<h4 class="anchor anchorTargetStickyNavbar_zIqo" id="data-race-in-multithreading">Data Race in Multithreading<a href="https://kkimdev.github.io/blog/2019/04/22/Rust-Compile-Time-Memory-Safety#data-race-in-multithreading" class="hash-link" aria-label="Direct link to Data Race in Multithreading" title="Direct link to Data Race in Multithreading" translate="no">​</a></h4>
<ul>
<li class="">
<p>C++</p>
<div class="language-cpp codeBlockContainer_JH_B theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_cFO2"><pre tabindex="0" class="prism-code language-cpp codeBlock_z2x2 thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_RwTv"><span class="token-line" style="color:#000000"><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="color:rgb(0, 0, 255)">include</span><span class="token macro property"> </span><span class="token macro property string" style="color:rgb(163, 21, 21)">&lt;iostream&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="color:rgb(0, 0, 255)">include</span><span class="token macro property"> </span><span class="token macro property string" style="color:rgb(163, 21, 21)">&lt;thread&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="color:rgb(0, 0, 255)">include</span><span class="token macro property"> </span><span class="token macro property string" style="color:rgb(163, 21, 21)">&lt;vector&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">static</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> MONEY </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">0</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">deposit_money</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> amount</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> i </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">0</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"> i </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain"> amount</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">++</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token operator" style="color:rgb(0, 0, 0)">++</span><span class="token plain">MONEY</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token comment" style="color:rgb(0, 128, 0)">// A data race occurs at runtime. Some increments can be lost.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">main</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">vector</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">thread</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"> threads</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">for</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> i </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">0</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"> i </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">100</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">++</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        threads</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token function" style="color:rgb(0, 0, 255)">emplace_back</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">deposit_money</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">10000</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">for</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> i </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">0</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"> i </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">100</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">++</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        threads</span><span class="token punctuation" style="color:rgb(4, 81, 165)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(4, 81, 165)">]</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token function" style="color:rgb(0, 0, 255)">join</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token comment" style="color:rgb(0, 128, 0)">// The result might not be 1,000,000 due to the data race.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">cout </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;&lt;</span><span class="token plain"> MONEY</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><br></span></code></pre></div></div>
</li>
<li class="">
<p>Rust</p>
<div class="language-rust codeBlockContainer_JH_B theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_cFO2"><pre tabindex="0" class="prism-code language-rust codeBlock_z2x2 thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_RwTv"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">static</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">mut</span><span class="token plain"> </span><span class="token constant" style="color:rgb(129, 31, 63)">MONEY</span><span class="token punctuation" style="color:rgb(4, 81, 165)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">i32</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">0</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(0, 0, 255)">deposit_money</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">amount</span><span class="token punctuation" style="color:rgb(4, 81, 165)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">i32</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">for</span><span class="token plain"> _ </span><span class="token keyword" style="color:rgb(0, 0, 255)">in</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">0</span><span class="token punctuation" style="color:rgb(4, 81, 165)">..</span><span class="token plain">amount </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token constant" style="color:rgb(129, 31, 63)">MONEY</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">+=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">1</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token comment" style="color:rgb(0, 128, 0)">// Compile error</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token comment" style="color:rgb(0, 128, 0)">// error[E0133]: use of mutable static is unsafe and requires unsafe function or block</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token comment" style="color:rgb(0, 128, 0)">//   |</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token comment" style="color:rgb(0, 128, 0)">//   |     MONEY += 1;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token comment" style="color:rgb(0, 128, 0)">//   |     ^^^^^^^^^^ use of mutable static</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token comment" style="color:rgb(0, 128, 0)">//   |</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token comment" style="color:rgb(0, 128, 0)">//   = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(0, 0, 255)">main</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">let</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">mut</span><span class="token plain"> threads </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token macro property">vec!</span><span class="token punctuation" style="color:rgb(4, 81, 165)">[</span><span class="token punctuation" style="color:rgb(4, 81, 165)">]</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">for</span><span class="token plain"> _ </span><span class="token keyword" style="color:rgb(0, 0, 255)">in</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">0</span><span class="token punctuation" style="color:rgb(4, 81, 165)">..</span><span class="token number" style="color:rgb(9, 134, 88)">100</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token keyword" style="color:rgb(0, 0, 255)">let</span><span class="token plain"> thread </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token namespace">std</span><span class="token namespace punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token namespace">thread</span><span class="token namespace punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token function" style="color:rgb(0, 0, 255)">spawn</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token closure-params closure-punctuation punctuation" style="color:rgb(4, 81, 165)">|</span><span class="token closure-params closure-punctuation punctuation" style="color:rgb(4, 81, 165)">|</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">deposit_money</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token number" style="color:rgb(9, 134, 88)">10000</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        threads</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token function" style="color:rgb(0, 0, 255)">push</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">thread</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">for</span><span class="token plain"> thread </span><span class="token keyword" style="color:rgb(0, 0, 255)">in</span><span class="token plain"> threads </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token keyword" style="color:rgb(0, 0, 255)">let</span><span class="token plain"> _ </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> thread</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token function" style="color:rgb(0, 0, 255)">join</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">unsafe</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token macro property">println!</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token string" style="color:rgb(163, 21, 21)">"{}"</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token constant" style="color:rgb(129, 31, 63)">MONEY</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><br></span></code></pre></div></div>
</li>
</ul>
<p>To make these static memory checks possible, Rust enforces that you can have either a single mutable reference or multiple read-only references at a time, but not both. In fact, these are very good idioms for structuring large codebases anyway, and they normally do not get in the way of writing ordinary applications. For libraries that require fine-grained memory control, like data containers (e.g., vectors, lists, and hash maps), the
<a href="https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html" target="_blank" rel="noopener noreferrer" class=""><code>unsafe</code> keyword</a> is
available to bypass these restrictions.</p>
<p>To be fair, there are compiler options and external tools that can detect C++ memory issues, but they are nowhere near as complete as Rust's built-in checks due to implementation complexity and inherent limitations in the C++ language specification.</p>
<ul>
<li class=""><code>-Wall -Wextra</code> compiler options: Even for the trivial examples above, GCC 8.3
and Clang 8.0 could only detect one of the five cases: the use of an uninitialized variable.</li>
<li class="">External tools (e.g., Valgrind, Address/Memory/Thread Sanitizers): These are
great tools. However, in practice, there is a big difference between compile-time and run-time detection. Run-time checks are limited to the specific code paths your tests execute. If that were sufficient, one could argue there would be no need for static typing, as tests could also be used to catch type errors.</li>
</ul>
<h1>How Rust Is Received</h1>
<p>Rust has been consistently ranked #1 in
<a href="https://insights.stackoverflow.com/survey/2019#technology-_-most-loved-dreaded-and-wanted-languages" target="_blank" rel="noopener noreferrer" class="">the Stack Overflow Developer Survey's "most loved" programming languages category</a>
for four years in a row, followed by Python #2, TypeScript #3, and Kotlin #4
in 2019.</p>
<p>It has also received favorable comments from some of the most highly regarded C/C++
programmers:</p>
<ul>
<li class=""><a href="https://en.wikipedia.org/wiki/John_Carmack" target="_blank" rel="noopener noreferrer" class="">John Carmack</a>:
<a href="https://twitter.com/id_aa_carmack/status/1094419108781789184?lang=en" target="_blank" rel="noopener noreferrer" class="">"...writing Rust code feels very wholesome."</a></li>
<li class=""><a href="https://en.wikipedia.org/wiki/Linus_Torvalds" target="_blank" rel="noopener noreferrer" class="">Linus Torvalds</a>:
<a href="https://www.infoworld.com/article/3109150/linux-at-25-linus-torvalds-on-the-evolution-and-future-of-linux.html" target="_blank" rel="noopener noreferrer" class="">"...We've had the system people who used Modula-2 or Ada, and I have to say Rust looks a lot better than either of those two disasters."</a></li>
<li class=""><a href="https://en.wikipedia.org/wiki/Miguel_de_Icaza" target="_blank" rel="noopener noreferrer" class="">Miguel de Icaza</a>:
<a href="https://www.reddit.com/r/programmerchat/comments/4dxpcp/i_am_miguel_de_icaza_i_started_xamarin_mono_gnome/d1ve1k5?utm_source=share&amp;utm_medium=web2x" target="_blank" rel="noopener noreferrer" class="">"...I have been following an OS written entirely in Rust, and it has great idioms."</a></li>
</ul>
<h1>Rust in Production</h1>
<ul>
<li class=""><a href="https://chromium.googlesource.com/chromiumos/platform/crosvm/" target="_blank" rel="noopener noreferrer" class="">Google's Crosvm (ChromeOS Virtual Machine Manager)</a></li>
<li class=""><a href="https://www.theregister.co.uk/2016/10/18/facebook_mercurial_devs_forget_git/" target="_blank" rel="noopener noreferrer" class="">Facebook's Mercurial server</a></li>
<li class=""><a href="https://aws.amazon.com/blogs/opensource/firecracker-open-source-secure-and-fast-microvm-for-serverless-computing/" target="_blank" rel="noopener noreferrer" class="">Amazon's AWS Firecracker</a></li>
<li class=""><a href="https://github.com/Azure/iotedge/tree/master/edgelet" target="_blank" rel="noopener noreferrer" class="">Microsoft's Azure IoT Edge</a></li>
<li class=""><a href="https://github.com/stratis-storage" target="_blank" rel="noopener noreferrer" class="">Red Hat's Stratis storage</a></li>
<li class=""><a href="https://dropbox.tech/infrastructure/rewriting-the-heart-of-our-sync-engine" target="_blank" rel="noopener noreferrer" class="">Dropbox's storage optimization engine</a></li>
<li class=""><a href="https://servo.org/" target="_blank" rel="noopener noreferrer" class="">Mozilla's Servo browser engine</a></li>
<li class=""><a href="https://blog.cloudflare.com/enjoy-a-slice-of-quic-and-rust/" target="_blank" rel="noopener noreferrer" class="">Cloudflare's QUIC protocol implementation</a></li>
<li class=""><a href="https://www.infoq.com/presentations/rust-npm-registry/" target="_blank" rel="noopener noreferrer" class="">NPM's authorization service</a></li>
<li class=""><a href="https://twitter.com/bltroutwine/status/1002234680949719040" target="_blank" rel="noopener noreferrer" class="">Unity's data engineering team</a></li>
<li class=""><a href="https://twitter.com/stuhood/status/978410393944047617?s=19" target="_blank" rel="noopener noreferrer" class="">Twitter's build team</a></li>
<li class=""><a href="https://www.reddit.com/r/rust/comments/7utj4t/reddit_is_hiring_a_senior_rust_engineer/" target="_blank" rel="noopener noreferrer" class="">Reddit's comment processing</a></li>
</ul>
<h1>Conclusion</h1>
<p>This is just one example of why Rust is compelling, and there are many other
things that Rust gets right. Hopefully, this post was interesting enough to encourage you to
read more about Rust!</p>
<h1>References</h1>
<ul>
<li class=""><a href="https://www.jonathanturner.org/2017/10/fun-facts-about-rust-growth.html" target="_blank" rel="noopener noreferrer" class="">https://www.jonathanturner.org/2017/10/fun-facts-about-rust-growth.html</a></li>
<li class=""><a href="https://www.jonathanturner.org/2018/07/snapshot-of-rust-popularity.html" target="_blank" rel="noopener noreferrer" class="">https://www.jonathanturner.org/2018/07/snapshot-of-rust-popularity.html</a></li>
<li class=""><a href="https://users.rust-lang.org/t/rust-quotes-and-press/5405" target="_blank" rel="noopener noreferrer" class="">https://users.rust-lang.org/t/rust-quotes-and-press/5405</a></li>
<li class=""><a href="https://www.rust-lang.org/production/users" target="_blank" rel="noopener noreferrer" class="">https://www.rust-lang.org/production/users</a></li>
</ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[IEEE 754 Floating-Point Types in C++]]></title>
            <link>https://kkimdev.github.io/blog/2018/06/15/IEEE-754-Floating-Point-Type-in-C++</link>
            <guid>https://kkimdev.github.io/blog/2018/06/15/IEEE-754-Floating-Point-Type-in-C++</guid>
            <pubDate>Fri, 15 Jun 2018 00:00:00 GMT</pubDate>
            <description><![CDATA[If you want to use IEEE 754 32-bit or 64-bit floating-point types in C++, you might think of using float and double. Unfortunately, the C++ standard offers very few guarantees about its built-in floating-point types.]]></description>
            <content:encoded><![CDATA[<p>If you want to use IEEE 754 32-bit or 64-bit floating-point types in C++, you might think of using <code>float</code> and <code>double</code>. Unfortunately, the C++ standard offers very few guarantees about its built-in floating-point types.</p>
<blockquote>
<p><a href="http://eel.is/c++draft/basic.fundamental#8" target="_blank" rel="noopener noreferrer" class="">§ 6.7.1.8</a> There are three
floating-point types: float, double, and long double. The type double provides
at least as much precision as float, and the type long double provides at
least as much precision as double. The set of values of the type float is a
subset of the set of values of the type double; the set of values of the type
double is a subset of the set of values of the type long double. <strong>The value
representation of floating-point types is implementation-defined</strong>. ...</p>
</blockquote>
<p>So, are we doomed? Not at all. C++ provides <a href="http://en.cppreference.com/w/cpp/types/numeric_limits" target="_blank" rel="noopener noreferrer" class=""><code>std::numeric_limits</code></a>, which gives us information about floating-point type traits. We can combine this with some neat compile-time tricks to craft a clean type API. Let's see how. The goal is to construct the following IEEE 754 floating-point types:</p>
<div class="language-cpp codeBlockContainer_JH_B theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_cFO2"><pre tabindex="0" class="prism-code language-cpp codeBlock_z2x2 thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_RwTv"><span class="token-line" style="color:#000000"><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="color:rgb(0, 0, 255)">include</span><span class="token macro property"> </span><span class="token macro property string" style="color:rgb(163, 21, 21)">&lt;iostream&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="color:rgb(0, 0, 255)">include</span><span class="token macro property"> </span><span class="token macro property string" style="color:rgb(163, 21, 21)">"ieee754_types.hpp"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">main</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  IEEE_754_2008_Binary</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token number" style="color:rgb(9, 134, 88)">32</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"> x </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">1.0</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  IEEE_754_2008_Binary</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token number" style="color:rgb(9, 134, 88)">64</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"> y </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">2.0</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">cout </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;&lt;</span><span class="token plain"> x </span><span class="token operator" style="color:rgb(0, 0, 0)">+</span><span class="token plain"> y </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;&lt;</span><span class="token plain"> std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">endl</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token comment" style="color:rgb(0, 128, 0)">// Compile-time error if the requested type doesn't exist on the system.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token comment" style="color:rgb(0, 128, 0)">// IEEE_754_2008_Binary&lt;16&gt; z;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><br></span></code></pre></div></div>
<p>Here, <code>IEEE_754_2008_Binary&lt;n&gt;</code> is an n-bit IEEE 754 floating-point type. On most systems, <code>IEEE_754_2008_Binary&lt;32&gt;</code> will be <code>float</code> and <code>IEEE_754_2008_Binary&lt;64&gt;</code> will be <code>double</code>. If a requested type like <code>IEEE_754_2008_Binary&lt;16&gt;</code> is not available, we should get a compile-time error with a clear message.</p>
<p>At this point, you might naturally ask, "Do we really need this? Can't we just assume <code>float</code> and <code>double</code> are IEEE 754, since they are on 99.9% of systems?" I used to think so, but I later found that others have submitted related proposals, like <a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1703.pdf" target="_blank" rel="noopener noreferrer" class="">N1703</a> and <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3626.pdf" target="_blank" rel="noopener noreferrer" class="">N3626</a>, to the C and C++ standards committees to address this issue by adding standard types like <code>float16_t</code>, <code>float32_t</code>, <code>float64_t</code>, and <code>float128_t</code>. So, perhaps this effort isn't entirely pointless. With that, let's get started.</p>
<p>First, let's create a way to check if a given type <code>T</code> fulfills the IEEE 754 standard and our other conditions.</p>
<div class="language-cpp codeBlockContainer_JH_B theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_cFO2"><pre tabindex="0" class="prism-code language-cpp codeBlock_z2x2 thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_RwTv"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> storage_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> exponent_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> mantissa_bits</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">struct</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">Is_Ieee754_2008_Binary_Interchange_Format</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">static</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">constexpr</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">bool</span><span class="token plain"> value </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">      </span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token generic-function function" style="color:rgb(0, 0, 255)">is_floating_point</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">T</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain">            </span><span class="token operator" style="color:rgb(0, 0, 0)">&amp;&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">      </span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">numeric_limits</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">is_iec559      </span><span class="token operator" style="color:rgb(0, 0, 0)">&amp;&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">      </span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">numeric_limits</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">radix </span><span class="token operator" style="color:rgb(0, 0, 0)">==</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">2</span><span class="token plain">     </span><span class="token operator" style="color:rgb(0, 0, 0)">&amp;&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">      </span><span class="token generic-function function" style="color:rgb(0, 0, 255)">get_storage_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">T</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">==</span><span class="token plain"> storage_bits    </span><span class="token operator" style="color:rgb(0, 0, 0)">&amp;&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">      </span><span class="token generic-function function" style="color:rgb(0, 0, 255)">get_exponent_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">T</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">==</span><span class="token plain"> exponent_bits  </span><span class="token operator" style="color:rgb(0, 0, 0)">&amp;&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">      </span><span class="token generic-function function" style="color:rgb(0, 0, 255)">get_mantissa_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">T</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">==</span><span class="token plain"> mantissa_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><br></span></code></pre></div></div>
<p>We use a <a href="https://en.cppreference.com/w/cpp/language/variable_template" target="_blank" rel="noopener noreferrer" class="">variable template</a> for the type-dependent boolean check and wrap it in a template <code>struct</code>. This makes it easy to pass around as a type template parameter later.</p>
<p>First, we check if <code>T</code> complies with IEEE 754 (equivalently, <a href="https://www.iso.org/standard/57469.html" target="_blank" rel="noopener noreferrer" class="">IEC 60559</a>) using <a href="https://en.cppreference.com/w/cpp/types/numeric_limits/is_iec559" target="_blank" rel="noopener noreferrer" class=""><code>std::numeric_limits&lt;T&gt;::is_iec559</code></a>. We also check <code>radix == 2</code> because IEEE 754 defines two types of floating-point numbers: binary and decimal. Finally, we check if <code>T</code> has the requested number of storage (width), exponent, and mantissa bits. Although IEEE 754 defines a standard number of exponent and mantissa bits for certain sizes (16, 32, 64, 128, etc.), it also allows implementations to have arbitrary sizes and bit counts (e.g., the <a href="https://en.wikipedia.org/wiki/Extended_precision#x86_extended_precision_format" target="_blank" rel="noopener noreferrer" class="">x86 extended precision format</a>). Therefore, we need to check that <code>T</code> has the exact format we want.</p>
<p>We can calculate the number of bits for <code>T</code> with the following simple compile-time functions:</p>
<div class="language-cpp codeBlockContainer_JH_B theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_cFO2"><pre tabindex="0" class="prism-code language-cpp codeBlock_z2x2 thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_RwTv"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">constexpr</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">get_storage_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">return</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">sizeof</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">T</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">*</span><span class="token plain"> CHAR_BIT</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">constexpr</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">get_exponent_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> exponent_range </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">numeric_limits</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">max_exponent </span><span class="token operator" style="color:rgb(0, 0, 0)">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">                       </span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">numeric_limits</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">min_exponent</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> bits </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">0</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">while</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">exponent_range </span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;&gt;</span><span class="token plain"> bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">0</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">++</span><span class="token plain">bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">return</span><span class="token plain"> bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">constexpr</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">get_mantissa_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">return</span><span class="token plain"> </span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">numeric_limits</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">digits </span><span class="token operator" style="color:rgb(0, 0, 0)">-</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">1</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><br></span></code></pre></div></div>
<p>For the mantissa bits, <code>std::numeric_limits&lt;T&gt;::digits</code> includes the implicit leading bit for normalized numbers, so we subtract 1 to get the number of explicit mantissa bits. For the exponent bits, a direct property is not available in <code>std::numeric_limits</code>, so we instead calculate the minimum number of bits required to represent its exponent range.</p>
<p>Now we have everything needed to determine if a given <code>T</code> is the type we're looking for. The next step is to automatically select such a type from the built-in floating-point types (<code>float</code>, <code>double</code>, and <code>long double</code>), given a size in bits (e.g., 32, 64). This is where it gets interesting.</p>
<p>The following recursive function, <code>find_type()</code>, selects a type from <code>T</code> and <code>Ts...</code> that satisfies the condition <code>C</code>.</p>
<div class="language-cpp codeBlockContainer_JH_B theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_cFO2"><pre tabindex="0" class="prism-code language-cpp codeBlock_z2x2 thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_RwTv"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">C</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token plain"> Ts</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">constexpr</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">auto</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">find_type</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">throw</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">if</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">constexpr</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">C</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> value</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">return</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">T</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">else</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">if</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">constexpr</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token keyword" style="color:rgb(0, 0, 255)">sizeof</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">Ts</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">1</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">return</span><span class="token plain"> </span><span class="token generic-function function" style="color:rgb(0, 0, 255)">find_type</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">C</span><span class="token generic-function generic class-name punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)"> Ts</span><span class="token generic-function generic class-name punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token generic-function generic class-name punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token generic-function generic class-name punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">else</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">return</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">void</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><br></span></code></pre></div></div>
<p>In our case, the types to search (<code>T</code> and <code>Ts...</code>) will be <code>float</code>, <code>double</code>, and <code>long double</code>. The condition <code>C</code> is the <code>Is_Ieee754_2008_Binary_Interchange_Format&lt;...&gt;</code> struct we defined previously.</p>
<p><code>typename... Ts</code> is a <a href="https://en.cppreference.com/w/cpp/language/parameter_pack" target="_blank" rel="noopener noreferrer" class="">parameter pack</a> that can match any number of types. The first <code>if</code> condition, <code>C::template value&lt;T&gt;</code>, checks if <code>T</code> satisfies the condition <code>C</code>; if so, it returns a default-constructed instance of <code>T</code>. The second <code>if</code> condition, <code>sizeof...(Ts) &gt;= 1</code>, checks if there are more types in <code>Ts...</code> to examine; if so, it recursively calls <code>find_type()</code> with <code>Ts...</code> to continue the search. Finally, if <code>Ts...</code> is empty, it returns <code>void()</code>.</p>
<p>Since the return type of <code>find_type()</code> is <code>auto</code>, the compiler will deduce the return type at compile time from the <code>return</code> statement in the branch that is taken. Additionally, <a href="http://en.cppreference.com/w/cpp/language/if#Constexpr_If" target="_blank" rel="noopener noreferrer" class=""><code>if constexpr</code></a> discards the unused conditional paths at compile time, so <code>find_type()</code> compiles successfully even though it has multiple <code>return</code> statements with different types.</p>
<p>Since <code>find_type()</code>'s return type is what we need, we can use <code>decltype(find_type&lt;...&gt;())</code> to get the resulting type. The <code>throw;</code> statement on the first line of <code>find_type()</code> is not strictly necessary, but it's there to indicate that <code>find_type()</code> is not meant to be called at runtime.</p>
<p>The following code defines a <code>BinaryFloatOrVoid</code> type alias using <code>decltype(find_type&lt;...&gt;())</code>. This new type will be an IEEE 754 floating-point type that matches the given storage, exponent, and mantissa bits, or it will be <code>void</code> if the search fails.</p>
<div class="language-cpp codeBlockContainer_JH_B theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_cFO2"><pre tabindex="0" class="prism-code language-cpp codeBlock_z2x2 thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_RwTv"><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> storage_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">          </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> exponent_bits </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">              </span><span class="token generic-function function" style="color:rgb(0, 0, 255)">standard_binary_interchange_format_exponent_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">storage_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">          </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> mantissa_bits </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">              </span><span class="token generic-function function" style="color:rgb(0, 0, 255)">standard_binary_interchange_format_mantissa_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">storage_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">using</span><span class="token plain"> BinaryFloatOrVoid </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">decltype</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain">find_type</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">                                                </span><span class="token comment" style="color:rgb(0, 128, 0)">//</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">             Is_Ieee754_2008_Binary_Interchange_Format</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">storage_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain">   </span><span class="token comment" style="color:rgb(0, 128, 0)">//</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">                                                       exponent_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain">  </span><span class="token comment" style="color:rgb(0, 128, 0)">//</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">                                                       mantissa_bits</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">             </span><span class="token keyword" style="color:rgb(0, 0, 255)">float</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">double</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">long</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">double</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><br></span></code></pre></div></div>
<p>The functions <code>standard_binary_interchange_format_exponent_bits()</code> and <code>standard_binary_interchange_format_mantissa_bits()</code> return the standard number of exponent and mantissa bits, respectively. We set them as default values for <code>exponent_bits</code> and <code>mantissa_bits</code> for convenience. I will omit their implementations, as they are straightforward.</p>
<p>Before <code>if constexpr</code> was added in C++17, this kind of compile-time type manipulation was typically implemented with <a href="https://en.wikipedia.org/wiki/Substitution_failure_is_not_an_error" target="_blank" rel="noopener noreferrer" class="">SFINAE</a>. The following code shows how this can be done using that approach:</p>
<div class="language-cpp codeBlockContainer_JH_B theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_cFO2"><pre tabindex="0" class="prism-code language-cpp codeBlock_z2x2 thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_RwTv"><span class="token-line" style="color:#000000"><span class="token comment" style="color:rgb(0, 128, 0)">// Recursion termination: Type not found.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">C</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token plain"> Ts</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">struct</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">FindType</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">using</span><span class="token plain"> type </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">void</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token comment" style="color:rgb(0, 128, 0)">// Recursion</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">C</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token plain"> Ts</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">struct</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">FindType</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">C</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> T</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> Ts</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token comment" style="color:rgb(0, 128, 0)">// Set `type = T` if T satisfies condition C; otherwise, keep</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token comment" style="color:rgb(0, 128, 0)">// searching in the remaining types, Ts...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">using</span><span class="token plain"> type </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">conditional_t</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">  </span><span class="token comment" style="color:rgb(0, 128, 0)">//</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">      C</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> value</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> T</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">FindType</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">C</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> Ts</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token punctuation" style="color:rgb(4, 81, 165)">.</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">type</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> storage_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">          </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> exponent_bits </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">              </span><span class="token generic-function function" style="color:rgb(0, 0, 255)">standard_binary_interchange_format_exponent_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">storage_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">          </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> mantissa_bits </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">              </span><span class="token generic-function function" style="color:rgb(0, 0, 255)">standard_binary_interchange_format_mantissa_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">storage_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">using</span><span class="token plain"> BinaryFloatOrVoid </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">FindType</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">                  </span><span class="token comment" style="color:rgb(0, 128, 0)">//</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    Is_Ieee754_2008_Binary_Interchange_Format</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">storage_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain">   </span><span class="token comment" style="color:rgb(0, 128, 0)">//</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">                                              exponent_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain">  </span><span class="token comment" style="color:rgb(0, 128, 0)">//</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">                                              mantissa_bits</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">float</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">double</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">long</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">double</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">type</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><br></span></code></pre></div></div>
<p>Clearly, the <code>if constexpr</code> version is simpler and much more readable. I expect to see less of the "SFINAE mess" in the future, thanks to <code>if constexpr</code> and, hopefully, <a href="https://en.wikipedia.org/wiki/Concepts_(C%2B%2B)" target="_blank" rel="noopener noreferrer" class="">concepts</a>.</p>
<p>Finally, we introduce another type layer to produce a compile-time error with a clear message if the requested type is not available (i.e., <code>BinaryFloatOrVoid</code> is <code>void</code>).</p>
<div class="language-cpp codeBlockContainer_JH_B theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_cFO2"><pre tabindex="0" class="prism-code language-cpp codeBlock_z2x2 thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_RwTv"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">struct</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">AssertTypeFound</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">static_assert</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">      </span><span class="token operator" style="color:rgb(0, 0, 0)">!</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">is_same_v</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">T</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">void</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">      </span><span class="token string" style="color:rgb(163, 21, 21)">"No corresponding IEEE 754-2008 binary interchange format found."</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">using</span><span class="token plain"> type </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> T</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> storage_bits</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">using</span><span class="token plain"> IEEE_754_2008_Binary </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">typename</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">AssertTypeFound</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    BinaryFloatOrVoid</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">storage_bits</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;&gt;</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">type</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><br></span></code></pre></div></div>
<p>OK, we have finally constructed the type <code>IEEE_754_2008_Binary&lt;n&gt;</code> that guarantees conformance to the IEEE 754 standard binary interchange format. Yay!</p>
<p>So are we done? Not quite. There's one last step that every programmer loves: writing tests. :)</p>
<div class="language-cpp codeBlockContainer_JH_B theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_cFO2"><pre tabindex="0" class="prism-code language-cpp codeBlock_z2x2 thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_RwTv"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">template</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> storage_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> exponent_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">int</span><span class="token plain"> mantissa_bits</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">test_if_type_exists</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">throw</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">if</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">constexpr</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token operator" style="color:rgb(0, 0, 0)">!</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">is_same_v</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">BinaryFloatOrVoid</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">storage_bits</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">void</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">using</span><span class="token plain"> T </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> IEEE_754_2008_Binary</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">storage_bits</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">static_assert</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token generic-function function" style="color:rgb(0, 0, 255)">is_floating_point</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">T</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(163, 21, 21)">""</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">static_assert</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">numeric_limits</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">is_iec559</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(163, 21, 21)">""</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">static_assert</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">numeric_limits</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token plain">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token double-colon punctuation" style="color:rgb(4, 81, 165)">::</span><span class="token plain">radix </span><span class="token operator" style="color:rgb(0, 0, 0)">==</span><span class="token plain"> </span><span class="token number" style="color:rgb(9, 134, 88)">2</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(163, 21, 21)">""</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">static_assert</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token generic-function function" style="color:rgb(0, 0, 255)">get_storage_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">T</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">==</span><span class="token plain"> storage_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(163, 21, 21)">""</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">static_assert</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token generic-function function" style="color:rgb(0, 0, 255)">get_exponent_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">T</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">==</span><span class="token plain"> exponent_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(163, 21, 21)">""</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">static_assert</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token generic-function function" style="color:rgb(0, 0, 255)">get_mantissa_bits</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)">T</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">==</span><span class="token plain"> mantissa_bits</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(163, 21, 21)">""</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(0, 0, 255)">tests</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">throw</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token generic-function function" style="color:rgb(0, 0, 255)">test_if_type_exists</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name number" style="color:rgb(9, 134, 88)">16</span><span class="token generic-function generic class-name punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)"> </span><span class="token generic-function generic class-name number" style="color:rgb(9, 134, 88)">5</span><span class="token generic-function generic class-name punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)"> </span><span class="token generic-function generic class-name number" style="color:rgb(9, 134, 88)">10</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token generic-function function" style="color:rgb(0, 0, 255)">test_if_type_exists</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name number" style="color:rgb(9, 134, 88)">32</span><span class="token generic-function generic class-name punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)"> </span><span class="token generic-function generic class-name number" style="color:rgb(9, 134, 88)">8</span><span class="token generic-function generic class-name punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)"> </span><span class="token generic-function generic class-name number" style="color:rgb(9, 134, 88)">23</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token generic-function function" style="color:rgb(0, 0, 255)">test_if_type_exists</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name number" style="color:rgb(9, 134, 88)">64</span><span class="token generic-function generic class-name punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)"> </span><span class="token generic-function generic class-name number" style="color:rgb(9, 134, 88)">11</span><span class="token generic-function generic class-name punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)"> </span><span class="token generic-function generic class-name number" style="color:rgb(9, 134, 88)">52</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token generic-function function" style="color:rgb(0, 0, 255)">test_if_type_exists</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token generic-function generic class-name number" style="color:rgb(9, 134, 88)">128</span><span class="token generic-function generic class-name punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)"> </span><span class="token generic-function generic class-name number" style="color:rgb(9, 134, 88)">15</span><span class="token generic-function generic class-name punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token generic-function generic class-name" style="color:rgb(38, 127, 153)"> </span><span class="token generic-function generic class-name number" style="color:rgb(9, 134, 88)">112</span><span class="token generic-function generic class-name operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><br></span></code></pre></div></div>
<p>Again, all the checks are done at compile time with <code>static_assert</code>, so we don't need to call <code>tests()</code>. We just have to ensure that the <code>test_if_type_exists</code> functions are instantiated. If a type doesn't exist (e.g., 16- and 128-bit types on most systems), then <code>if constexpr</code> will simply discard the checks.</p>
<p>I hope you had as much fun reading this as I did writing it. The full implementation is available in this repository: <a href="https://github.com/kkimdev/ieee754-types" target="_blank" rel="noopener noreferrer" class="">https://github.com/kkimdev/ieee754-types</a>.</p>]]></content:encoded>
        </item>
    </channel>
</rss>